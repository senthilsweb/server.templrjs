{"generatedAt":1700103738592,"generateTime":202,"contents":[{"_path":"/aboutme/senthilnathan-karuppaiah","_dir":"aboutme","_draft":false,"_partial":false,"_locale":"","title":"Senthilnathan Karuppaiah","description":"I am a seasoned hands-on Software Architect with more than two decades of experience in product engineering and solution design. My journey in the tech industry began in 1999, and over the years, I've donned various roles, including Programmer, Team Lead, and Architect. With a relentless passion for innovation and technology, I've made significant contributions to startups, large enterprises, and multinational corporations.","date":"2023-09-09T12:00:00.000Z","published":true,"industries":[],"coverimage":null,"ogImage":null,"author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Page","tags":["Bio","About Me","Career"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"about-me"},"children":[{"type":"text","value":"About Me"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I am a seasoned hands-on Software Architect with more than two decades of experience in product engineering and solution design. My journey in the tech industry began in 1999, and over the years, I've donned various roles, including Programmer, Team Lead, and Architect. With a relentless passion for innovation and technology, I've made significant contributions to startups, large enterprises, and multinational corporations."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"At present, I work as a Senior Engineering Manager at Hitachi Vantara, USA, specializing in the Pentaho Data Catalog, Product Development. In this role, I lead a global distributed team of Software Engineering professionals across Asia, Europe, and the Americas. I contribute significantly to Core Engineering, Production Engineering, Pre-Sales, and Customer Success, serving as a Developer Advocate for the Pentaho Data Catalog product suite. This suite includes Data Discovery, Data Provenance, Data Governance/Classification, Business Metadata Management, Master Data Management, and Data Quality assessment."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"My deep knowledge in Data Discoveries product development involves processing petabytes of data using optimized high-performance data ingestion techniques, AI/ML, and algorithmic-based data fingerprinting and analysis. My journey has also taken me through two acquisitions, first by Centrica and then by Hitachi Vantara. This wealth of experience positions me as a versatile and adept professional ready to tackle complex data challenges and empower organizations with innovative solutions."}]},{"type":"element","tag":"h2","props":{"id":"technical-prowess"},"children":[{"type":"text","value":"Technical Prowess"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"My technical acumen spans a wide spectrum of technologies, tools, and frameworks. From Golang, Python, NodeJS, C#, and JAVA/J2EE to front-end frameworks, I have hands-on expertise in diverse programming languages and platforms. I've delved into AWS's IaaS & PaaS stack, mastering Elastic Beanstalk, SES, S3, Lambda, EventBridge, Step, and Route53, among others. Containerization, using Docker and Kubernetes, has also been a key part of my journey."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"My proficiency extends to numerous Relational Database Management Systems (RDBMS), ranging from legacy databases to modern data lakes and lakehouses. I've worked extensively with platforms such as Snowflake, Databricks, Object Store, and DuckDB. This comprehensive database knowledge allows me to architect robust and scalable solutions across a broad spectrum of data management challenges."}]},{"type":"element","tag":"h2","props":{"id":"open-source-contributions"},"children":[{"type":"text","value":"Open-Source Contributions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I am actively involved in open-source software development and have a strong presence in the community. My contributions can be found on my GitHub profile ("},{"type":"element","tag":"a","props":{"href":"https://github.com/senthilsweb","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/senthilsweb"}]},{"type":"text","value":"), where I maintain open-source projects and contribute to various codes and initiatives. My commitment to the open-source community reflects my dedication to collaborative and transparent software development."}]},{"type":"element","tag":"h2","props":{"id":"global-experience"},"children":[{"type":"text","value":"Global Experience"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"My career journey has spanned the globe, taking me from India, where I originally started my career, to the USA, Japan, Ukraine, Dubai in the Middle East, Europe, and Singapore. This international exposure has honed my ability to adapt, collaborate, and thrive in diverse cultural and business landscapes. In particular, my three-year stint in Japan allowed me to develop conversational Japanese skills, facilitating seamless cross-border communication."}]},{"type":"element","tag":"h2","props":{"id":"start-up-enthusiast"},"children":[{"type":"text","value":"Start-Up Enthusiast"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I have a fervent enthusiasm for startups and a proven track record in startup culture. As a founding team member of Io-Tahoe (earlier Rokittech), I contributed to building a successful data discovery and governance product company. We harnessed algorithmic, AI, and ML techniques to create a highly-rated product used by large enterprises, banks, healthcare institutions, and more. This journey included two acquisitions, with Hitachi Vantara being the latest, in May 2021."}]},{"type":"element","tag":"h2","props":{"id":"get-in-touch"},"children":[{"type":"text","value":"Get in Touch"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Feel free to connect with me on my social platforms, and let's explore the world of technology and innovation together."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"about-me","depth":2,"text":"About Me"},{"id":"technical-prowess","depth":2,"text":"Technical Prowess"},{"id":"open-source-contributions","depth":2,"text":"Open-Source Contributions"},{"id":"global-experience","depth":2,"text":"Global Experience"},{"id":"start-up-enthusiast","depth":2,"text":"Start-Up Enthusiast"},{"id":"get-in-touch","depth":2,"text":"Get in Touch"}]}},"_type":"markdown","_id":"content:aboutme:senthilnathan-karuppaiah.md","_source":"content","_file":"aboutme/senthilnathan-karuppaiah.md","_extension":"md"},{"_path":"/blogs/2021-06-20-backinwriting","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Got back into blog writing.","description":"I got back into writing to share my thoughts and reusable piece of work for the open source community. All of the work in this website which includes every piece of technical details has been hand crafted using modern web frameworks, tools and technologies.","date":"2021-06-20T12:00:00.000Z","published":true,"industries":[],"coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1625528539/bird-01.jpg","ogImage":"https://res.cloudinary.com/nathansweb/image/upload/v1625528539/bird-01.jpg","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1623612257/profile/sk_profile_sq.png","type":"Blog","tags":["Blog","Article","Technology"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I got back into writing to share my thoughts and reusable piece of work for the open source community. All of the work in this website which includes every piece of technical details has been hand crafted using modern web frameworks, tools and technologies."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I got back into writing to share my thoughts and reusable piece of work for the open source community. All of the work in this website which includes every piece of technical details has been hand crafted using modern web frameworks, tools and technologies."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All of the work in this website which includes every piece of technical details has been hand crafted using modern web frameworks, tools and technologies and it is in rigorous development."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:blogs:2021-06-20-backinwriting.md","_source":"content","_file":"blogs/2021-06-20-backinwriting.md","_extension":"md"},{"_path":"/blogs/2021-07-18-run-static-website-in-stand-alone-golang-binary","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Deploy Zypress (or Static Website) in a standalone Golang binary","description":"Starting with Golang 1.16, file embedding is supported in Go without the need for an external package. I leveraged this feature and added the support to build and deploy Zypress (or any SPA / Static Web Sites) in standalone binary for all operating systems i.e. Linux, Mac OS, Windows built using Golang’s latest file embedding feature.","date":"2021-07-17T12:00:00.000Z","published":true,"industries":[],"coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1626527779/gophers/docker_whale-transparent-bg.png","ogImage":"https://res.cloudinary.com/nathansweb/image/upload/v1626527779/gophers/docker_whale-transparent-bg.png","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["Blog","Zypress","Website","JAMSTACK","CI/CD"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Starting with Golang 1.16, file embedding is supported in Go without the need for an external package. I leveraged this feature and added the support to build and deploy Zypress (or any SPA / Static Web Sites) in standalone binary for all operating systems i.e. Linux, Mac OS, Windows built using Golang’s latest file embedding feature."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Starting with Golang 1.16, file embedding is supported in Go without the need for an external package. I leveraged this feature and added the support to build and deploy Zypress (or any SPA / Static Web Sites) in standalone binary for all operating systems i.e. Linux, Mac OS, Windows built using Golang’s latest file embedding feature."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"a","props":{"href":"https://github.com/senthilsweb/zypress","rel":["nofollow"]},"children":[{"type":"text","value":"zypress code repo"}]},{"type":"text","value":" now contains the following code files at the root of the project to build the binary in your local system and run anywhere."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"main.go"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"build.sh"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"systemd"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This requires "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Go"}]},{"type":"text","value":" to be installed in your machine and configured in your "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"PATH"}]},{"type":"text","value":" variable. No worries, if you don't know "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Golang"}]},{"type":"text","value":" or don't want to build it in your system!.. I added support for cloud build using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"github action"}]},{"type":"text","value":" to generate the binary named "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"zypress-server"}]},{"type":"text","value":" and upload the artifacts for "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"download"}]},{"type":"text","value":" (http://)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Running the website directlly by executing a single binary will be super helpful to deploy the website (any static web site) on-prem or to share your work privately with anyone or your client privately as email attachment or upload in a dropbox / google drive. The size of the binary is "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"< 10mb"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"build-zypress-binaries"},"children":[{"type":"text","value":"Build zypress binaries"}]},{"type":"element","tag":"h3","props":{"id":"simple"},"children":[{"type":"text","value":"Simple"}]},{"type":"element","tag":"pre","props":{"code":"go build main.go -o zypress-server\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go build main.go -o zypress-server\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"or"}]},{"type":"element","tag":"h3","props":{"id":"advanced"},"children":[{"type":"text","value":"Advanced"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A utility bash script provided to create the following artifacts:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Build and generate the binaries for Linux, Mac and Windows for both 32 bit and 64 bit operating system"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Linux systemd service file to run "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"zypress-server"}]},{"type":"text","value":" as service with auto-restart during server reboot"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"install.sh"}]},{"type":"text","value":" utility shell script"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"readme.md"}]},{"type":"text","value":" file"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"release bundle as `tar' file."}]}]},{"type":"element","tag":"pre","props":{"code":"sh server.build.sh\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"sh server.build.sh\n"}]}]},{"type":"element","tag":"h2","props":{"id":"how-to-run-zypress-server"},"children":[{"type":"text","value":"How to run zypress server?"}]},{"type":"element","tag":"pre","props":{"code":"./zypress-server [-p] [-e] [-s] [-i] [-d] \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./zypress-server [-p] [-e] [-s] [-i] [-d] \n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"-p"}]},{"type":"text","value":" port. Default value is "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"8080"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"-e"}]},{"type":"text","value":" environment. Default value is "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"dev"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"-s"}]},{"type":"text","value":" Website source type. Default value is "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"embed"}]},{"type":"text","value":" meaning the website source is embedded inside the binary."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" index document to serve. Default value is "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"index.html"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"-d"}]},{"type":"text","value":" Directory where the website source is located. Default value is "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"./dist"}]},{"type":"text","value":" relative to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"zypress"}]},{"type":"text","value":" server."}]}]},{"type":"element","tag":"alert","props":{"type":"info"},"children":[{"type":"text","value":"\n[-d] is considered when the source type is file-system\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Run with default configurations"}]},{"type":"element","tag":"pre","props":{"code":"./zypress-server\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./zypress-server\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Overriden port to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"5000"}]}]},{"type":"element","tag":"pre","props":{"code":"./zypress-server -p 5000\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./zypress-server -p 5000\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Run with file-system mode."}]},{"type":"element","tag":"pre","props":{"code":"./zypress-server -p 5000 -e 'prod' -s 'fs' -f 'index.html' -d '/opt/www/zypresse'\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./zypress-server -p 5000 -e 'prod' -s 'fs' -f 'index.html' -d '/opt/www/zypresse'\n"}]}]},{"type":"element","tag":"h2","props":{"id":"references"},"children":[{"type":"text","value":"References"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://nuxtjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"Nuxt.js"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://content.nuxtjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"Nuxt/Content"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://tailwindcss.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Tailwind.css"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"build-zypress-binaries","depth":2,"text":"Build zypress binaries","children":[{"id":"simple","depth":3,"text":"Simple"},{"id":"advanced","depth":3,"text":"Advanced"}]},{"id":"how-to-run-zypress-server","depth":2,"text":"How to run zypress server?"},{"id":"references","depth":2,"text":"References"}]}},"_type":"markdown","_id":"content:blogs:2021-07-18-run-static-website-in-stand-alone-golang-binary.md","_source":"content","_file":"blogs/2021-07-18-run-static-website-in-stand-alone-golang-binary.md","_extension":"md"},{"_path":"/blogs/2021-10-08-zypress-server-in-golang","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Open sourced new Go API Server which can be deployed 100% free in Netlify","description":"I started notifier golang api project as multipurpose notification library to send mail, text, slack, push, telegram etc. but it is expanding as enterprise grade frictionless api server with low memory footprint. It is designed in such a manner that, it can be hosted as aws lambda function or any cloud provider or on-prem in bare metal. As of this writing, the size of the golang binary is just ~20 MB.","date":"2021-10-31T12:00:00.000Z","published":true,"industries":[],"rightStripColor":"bg-gray-50","coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1635729312/senthilsweb.com/blog/9_e1zan5.svg","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","ogimage":"https://res.cloudinary.com/nathansweb/image/upload/v1635729312/senthilsweb.com/blog/9_e1zan5.svg","type":"Blog","tags":["Blog","CI/CD","Golang","api","Server","Cloud","Netlify","Maizzle"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I started "},{"type":"element","tag":"a","props":{"href":"https://github.com/senthilsweb/notifier","rel":["nofollow"]},"children":[{"type":"text","value":"notifier"}]},{"type":"text","value":" golang api project as multipurpose notification library to send mail, text, slack, push, telegram etc. but it is expanding as enterprise grade frictionless api server with low memory footprint. It is designed in such a manner that, it can be hosted as aws lambda function or any cloud provider or on-prem in bare metal. As of this writing, the size of the golang binary is just ~20 MB."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I started "},{"type":"element","tag":"a","props":{"href":"https://github.com/senthilsweb/notifier","rel":["nofollow"]},"children":[{"type":"text","value":"notifier"}]},{"type":"text","value":" golang api project as multipurpose notification library to send mail, text, slack, push, telegram etc. but it is expanding as enterprise grade frictionless api server with low memory footprint. It is designed in such a manner that, it can be hosted as aws lambda function or any cloud provider or on-prem in bare metal. As of this writing, the size of the golang binary is just ~20 MB."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is very well suited to host it in Netlify 100% free and yes, "},{"type":"element","tag":"a","props":{"href":"https://www.netlift.com","rel":["nofollow"]},"children":[{"type":"text","value":"Netlify"}]},{"type":"text","value":" won't ask for your credit card details for registration."}]},{"type":"element","tag":"h3","props":{"id":"design-goals"},"children":[{"type":"text","value":"Design Goals"}]},{"type":"element","tag":"list","props":{":items":"design-goals"},"children":[]},{"type":"element","tag":"h3","props":{"id":"pre-requisites"},"children":[{"type":"text","value":"Pre-requisites"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Should have Go installed in your local development environment"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Optional "},{"type":"element","tag":"a","props":{"href":"https://app.netlify.com/","rel":["nofollow"]},"children":[{"type":"text","value":"netlify"}]},{"type":"text","value":" account to deploy this golang api as serverless functions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Optional "},{"type":"element","tag":"a","props":{"href":"https://app.netlify.com/","rel":["nofollow"]},"children":[{"type":"text","value":"netlify"}]},{"type":"text","value":" CLI"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Optional if you want to send HTML formatted email using mailgun template. I used "},{"type":"element","tag":"a","props":{"href":"https://maizzle.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Maizzle"}]},{"type":"text","value":" to build HTML emails with\n"},{"type":"element","tag":"a","props":{"href":"https://tailwindcss.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Tailwind CSS"}]},{"type":"element","tag":"a","props":{"href":"https://maizzle.com/","rel":["nofollow"]},"children":[{"type":"text","value":"https://maizzle.com/"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://app.mailgun.com/","rel":["nofollow"]},"children":[{"type":"text","value":"mailgun"}]},{"type":"text","value":" account as the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"notify"}]},{"type":"text","value":" (sendmail) api is built using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"mailgun"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"VSCode Editor or "},{"type":"element","tag":"a","props":{"href":"https://gitpod.io/","rel":["nofollow"]},"children":[{"type":"text","value":"Gitpod"}]},{"type":"text","value":" online VSCode editor 50 hours per month free plan"}]}]},{"type":"element","tag":"h3","props":{"id":"local-development"},"children":[{"type":"text","value":"Local Development"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Clone repository."}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code-block","props":{"label":"Bash","active":""},"children":[{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"git clone https://github.com/senthilsweb/notifier.git\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"git clone https://github.com/senthilsweb/notifier.git\n"}]}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Local build (Mac OS)"}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code-block","props":{"label":"Bash","active":""},"children":[{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"go build\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go build\n"}]}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Local Run"}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code-block","props":{"label":"Bash","active":""},"children":[{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"./notifier -p \"3000\"\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./notifier -p \"3000\"\n"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"rest-endpoints"},"children":[{"type":"text","value":"REST Endpoints"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following APIs implemented and readily available to use in your projects. For quick testing, you can try from the hosted version of mine in netlify. Please change the end-point relative url to yours."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"https://zybes.netlify.app/api"}]}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"Request"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"Endpoints"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"Functionality"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"POST"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://zybes.netlify.app/api/notify/mailgun","rel":["nofollow"]},"children":[{"type":"text","value":"https://zybes.netlify.app/api/notify/mailgun"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Send email"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"GET"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://zybes.netlify.app/api/ping","rel":["nofollow"]},"children":[{"type":"text","value":"https://zybes.netlify.app/api/ping"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Health check"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Payload for "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"https://zybes.netlify.app/api/notify/mailgun"}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code-block","props":{"label":"Json","active":""},"children":[{"type":"element","tag":"pre","props":{"className":["language-Json"],"code":"{\n    \"message\": {\n        \"subject\": \"This is subject\",\n        \"body\": \"This is body\",\n        \"template\": \"welcome_email\",\n        \"recipient\": \"name <your email@gmail.com>\",\n        \"payload\": {\"name\":\"John Smith\"}\n    },\n    \"MAILGUN_DOMAIN\": \"your domain\",\n    \"MAILGUN_KEY\": \"your key\",\n    \"EMAIL_SENDER\": \"Mailgun Sandbox <your sender>\"\n}\n","language":"Json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"message\": {\n        \"subject\": \"This is subject\",\n        \"body\": \"This is body\",\n        \"template\": \"welcome_email\",\n        \"recipient\": \"name <your email@gmail.com>\",\n        \"payload\": {\"name\":\"John Smith\"}\n    },\n    \"MAILGUN_DOMAIN\": \"your domain\",\n    \"MAILGUN_KEY\": \"your key\",\n    \"EMAIL_SENDER\": \"Mailgun Sandbox <your sender>\"\n}\n"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"netlify-deployment"},"children":[{"type":"text","value":"Netlify Deployment"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Refer the following documentaion and blog post to host the server (and optional Single Page Application) at "},{"type":"element","tag":"a","props":{"href":"https://docs.netlify.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Netlify"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.netlify.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Netlify"}]},{"type":"text","value":" documentaion"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.carlmjohnson.net/post/2020/how-to-host-golang-on-netlify-for-free/","rel":["nofollow"]},"children":[{"type":"text","value":"blog post"}]},{"type":"text","value":" by "},{"type":"element","tag":"a","props":{"href":"https://carlmjohnson.net/","rel":["nofollow"]},"children":[{"type":"text","value":"Carl M. Johnson"}]}]}]},{"type":"element","tag":"h3","props":{"id":"key-frameworks-and-libraries-used"},"children":[{"type":"text","value":"Key Frameworks and Libraries used"}]},{"type":"element","tag":"ul","props":{"className":["contains-task-list"]},"children":[{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"checked":true,"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" github.com/apex/gateway"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"checked":true,"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" github.com/gin-gonic/gin"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"checked":true,"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" github.com/mailgun/mailgun-go/v4"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"checked":true,"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" github.com/sirupsen/logrus"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"checked":true,"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" github.com/spf13/viper"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"checked":true,"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" github.com/tidwall/gjson"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"design-goals","depth":3,"text":"Design Goals"},{"id":"pre-requisites","depth":3,"text":"Pre-requisites"},{"id":"local-development","depth":3,"text":"Local Development"},{"id":"rest-endpoints","depth":3,"text":"REST Endpoints"},{"id":"netlify-deployment","depth":3,"text":"Netlify Deployment"},{"id":"key-frameworks-and-libraries-used","depth":3,"text":"Key Frameworks and Libraries used"}]}},"_type":"markdown","_id":"content:blogs:2021-10-08-zypress-server-in-golang.md","_source":"content","_file":"blogs/2021-10-08-zypress-server-in-golang.md","_extension":"md"},{"_path":"/blogs/2021-10-31-local-dns-in-mac-for-local-kubernetes-ingress","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"How to create local DNS in Mac OS for Kubernetes Ingress testing?","description":"Often times we need a way to simulate local domain name pointing to your api or web development running in your localhost and it is critical if you use kubernetes ingress controller i.e. nginx traefik controllers to test your configuration in the local Mac laptop.","date":"2021-10-28T12:00:00.000Z","published":true,"industries":[],"rightStripColor":"bg-gray-50","coverimage":"https://images.unsplash.com/photo-1485394735640-56c0356b62cf?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3540&q=80","ogImage":"https://images.unsplash.com/photo-1485394735640-56c0356b62cf?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3540&q=80","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["Kubernetes","Blog","CI/CD","Gitops"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Often times we need a way to simulate local domain name pointing to your "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"api"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"web"}]},{"type":"text","value":" development running in your localhost and it is critical if you use kubernetes ingress controller i.e. "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"nginx"}]},{"type":"text","value":" "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"traefik"}]},{"type":"text","value":" controllers to test your configuration in the local Mac laptop."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Often times we need a way to simulate local domain name pointing to your "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"api"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"web"}]},{"type":"text","value":" development running in your localhost and it is critical if you use kubernetes ingress controller i.e. "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"nginx"}]},{"type":"text","value":" "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"traefik"}]},{"type":"text","value":" controllers to test your configuration in the local Mac laptop."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This blog post will play as foundation for my upcoming kubernetes articles. Follow the below steps to setup your local Domain Name Service."}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"create a new ip e.g. "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"10.0.0.1"}]}]}]},{"type":"element","tag":"pre","props":{"code":"sudo ifconfig lo0 10.0.0.1 alias\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"sudo ifconfig lo0 10.0.0.1 alias\n"}]}]},{"type":"element","tag":"ol","props":{"start":2},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Forward the new ip address with port 80 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"10.0.0.1:80"}]},{"type":"text","value":" to your local "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"api"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"web"}]},{"type":"text","value":" running in different ports, in this example my api is running in port "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":":3000"}]}]}]},{"type":"element","tag":"pre","props":{"code":"echo \"rdr pass on lo0 inet proto tcp from any to 10.0.0.1 port 80 -> 127.0.0.1 port 3000\" | sudo pfctl -ef -\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"echo \"rdr pass on lo0 inet proto tcp from any to 10.0.0.1 port 80 -> 127.0.0.1 port 3000\" | sudo pfctl -ef -\n"}]}]},{"type":"element","tag":"ol","props":{"start":3},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Edit your "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"/etc/hosts"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"/private/etc/hosts"}]},{"type":"text","value":" file and add the following line to map your domain, in my case I use fake domain name as "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"zypress.me"}]},{"type":"text","value":" to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"10.0.0.1"}]}]}]},{"type":"element","tag":"pre","props":{"code":"10.0.0.1 zypress.me\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"10.0.0.1 zypress.me\n"}]}]},{"type":"element","tag":"ol","props":{"start":4},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"After you saving your hosts file, flush your local DNS to clear the DNS cache."}]}]},{"type":"element","tag":"pre","props":{"code":"sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder\n"}]}]},{"type":"element","tag":"ol","props":{"start":5},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Access your "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"api"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"web"}]},{"type":"text","value":" application using the just created fake dns "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"http://zypress.me"}]}]}]},{"type":"element","tag":"h2","props":{"id":"how-to-delete-the-just-created-ip"},"children":[{"type":"text","value":"How to Delete the just created ip?"}]},{"type":"element","tag":"pre","props":{"code":"sudo ifconfig lo0 10.0.0.1 -alias\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"sudo ifconfig lo0 10.0.0.1 -alias\n"}]}]},{"type":"element","tag":"h2","props":{"id":"references"},"children":[{"type":"text","value":"References"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://help.dreamhost.com/hc/en-us/articles/214981288-Flushing-your-DNS-cache-in-Mac-OS-X-and-Linux","rel":["nofollow"]},"children":[{"type":"text","value":"Flushing your DNS cache in Mac OS X and Linux"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://serverfault.com/questions/102416/iptables-equivalent-for-mac-os-x/673551#673551","rel":["nofollow"]},"children":[{"type":"text","value":"Stackoverflow"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"how-to-delete-the-just-created-ip","depth":2,"text":"How to Delete the just created ip?"},{"id":"references","depth":2,"text":"References"}]}},"_type":"markdown","_id":"content:blogs:2021-10-31-local-dns-in-mac-for-local-kubernetes-ingress.md","_source":"content","_file":"blogs/2021-10-31-local-dns-in-mac-for-local-kubernetes-ingress.md","_extension":"md"},{"_path":"/blogs/2021-11-07-expose-apps-running-in-your-home-lab-server-securely-to-public-internet-thru-cloudflare-tunnel","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"How to expose apps running in your home lab server securely to public internet thru cloudflare tunnel?","description":"This post will guide you to expose your local development websites and webhooks or any http applications running in your home servers to public internet in a safe and secure manner using free Cloudflare (cloudflared) tunnel client also known as Argo Tunnel. It is 100% free and doesn't requre any registrations or Credit card details.","date":"2021-11-07T12:00:00.000Z","published":true,"coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1636292289/senthilsweb.com/blog/Multiple-proxy-services-in-one-cloudflared-1_royp2j.png","ogImage":"https://res.cloudinary.com/nathansweb/image/upload/v1636292289/senthilsweb.com/blog/Multiple-proxy-services-in-one-cloudflared-1_royp2j.png","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["tunnel","cloudflared","ngrok","Free tunnel","Cloud","cookbook"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This post will guide you to expose your local development websites and webhooks or any http applications running in your home servers to public internet in a safe and secure manner using free Cloudflare (cloudflared) tunnel client also known as Argo Tunnel. It is 100% free and doesn't requre any registrations or Credit card details."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This post will guide you to expose your local development websites and webhooks or any http applications running in your home servers to public internet in a safe and secure manner using free Cloudflare (cloudflared) tunnel client also known as Argo Tunnel. It is 100% free and doesn't requre any registrations or Credit card details."}]},{"type":"element","tag":"h2","props":{"id":"use-cases"},"children":[{"type":"text","value":"Use cases"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Common usecases where tunneling softwares will be handy"}]},{"type":"element","tag":"list","props":{":items":"usecases"},"children":[]},{"type":"element","tag":"h2","props":{"id":"architecture"},"children":[{"type":"text","value":"Architecture"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"cloudflared"}]},{"type":"text","value":" is command-line client for Cloudflare Tunnel, a tunneling daemon that proxies traffic from the Cloudflare network to your origins. This daemon sits between Cloudflare network and your origin (e.g. a webserver) as shown in the network architecture diagram."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"background","src":"https://res.cloudinary.com/nathansweb/image/upload/v1636289611/senthilsweb.com/blog/cloudflared-argo-tunnel-arch_jy4vx9.jpg"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"getting-started"},"children":[{"type":"text","value":"Getting Started"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation#macos","rel":["nofollow"]},"children":[{"type":"text","value":"Download"}]},{"type":"text","value":" cloudfalred tunnel client"}]},{"type":"element","tag":"h2","props":{"id":"installation"},"children":[{"type":"text","value":"Installation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"cd into the folder where your downloaded cloudflared"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code-block","props":{"label":"Bash","active":""},"children":[{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"cd [path where your downloaded cloudflared]/\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"cd [path where your downloaded cloudflared]/\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Run the tunnel pointing to your local website url. In my case, I am running grafana in a docker container at port 3000"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code-block","props":{"label":"Bash","active":""},"children":[{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"./cloudflared tunnel --url http://localhost:3000\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./cloudflared tunnel --url http://localhost:3000\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"cloudflared-features"},"children":[{"type":"text","value":"Cloudflared Features"}]},{"type":"element","tag":"list","props":{":items":"features"},"children":[]},{"type":"element","tag":"h2","props":{"id":"cloudflared-shortcomings"},"children":[{"type":"text","value":"Cloudflared shortcomings"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The cloudflared tunneling client doesn't support non http protocols (i.e. "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"tcp"}]},{"type":"text","value":"). E.g. expose MS SQL Server or PostgreSQL dabases running your local."}]},{"type":"element","tag":"h2","props":{"id":"alternate-softwares"},"children":[{"type":"text","value":"Alternate softwares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://ngrok.com/download","rel":["nofollow"]},"children":[{"type":"text","value":"ngrok"}]},{"type":"text","value":" supports both http and tcp however the free version supports just one instance of "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"ngrok"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Expose MS SQL server running in your local machine at port #. 1433"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code-block","props":{"label":"Bash","active":""},"children":[{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"./ngrok tcp 1433\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./ngrok tcp 1433\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"references"},"children":[{"type":"text","value":"References:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/cloudflare/cloudflared","rel":["nofollow"]},"children":[{"type":"text","value":"Cloudfalred"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.cloudflare.com/many-services-one-cloudflared/","rel":["nofollow"]},"children":[{"type":"text","value":"Many services, one cloudflared"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://servebolt.com/help/how-to-set-up-argo-tunnels-for-remote-access-to-local-development-sites/","rel":["nofollow"]},"children":[{"type":"text","value":"How to set up argo tunnels"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.obytes.com/blog/how-we-used-cloudflare-argo-tunnels-access-to-replace-a-vpn","rel":["nofollow"]},"children":[{"type":"text","value":"How we used Cloudflare Argo Tunnels + Access to replace a VPN"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"use-cases","depth":2,"text":"Use cases"},{"id":"architecture","depth":2,"text":"Architecture"},{"id":"getting-started","depth":2,"text":"Getting Started"},{"id":"installation","depth":2,"text":"Installation"},{"id":"cloudflared-features","depth":2,"text":"Cloudflared Features"},{"id":"cloudflared-shortcomings","depth":2,"text":"Cloudflared shortcomings"},{"id":"alternate-softwares","depth":2,"text":"Alternate softwares"},{"id":"references","depth":2,"text":"References:"}]}},"_type":"markdown","_id":"content:blogs:2021-11-07-expose-apps-running-in-your-home-lab-server-securely-to-public-internet-thru-cloudflare-tunnel.md","_source":"content","_file":"blogs/2021-11-07-expose-apps-running-in-your-home-lab-server-securely-to-public-internet-thru-cloudflare-tunnel.md","_extension":"md"},{"_path":"/blogs/all-about-zypress-a-blog-engine-in-a-single-binary","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"All about Zypress, a blog engine in a single binary","description":"Unlike wordpress or other blog / websites, this one is all yours. Publish your work on a custom domain and host it in popular serverless JAMSTACK sites like netlify, surge.sh, heroku etc.","date":"2021-07-15T12:00:00.000Z","published":true,"industries":[],"rightStripColor":"bg-gray-50","coverimage":"https://images.unsplash.com/photo-1542969587-5b90477b65f4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3319&q=80","ogImage":"https://images.unsplash.com/photo-1542969587-5b90477b65f4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3319&q=80","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["Blog","Zypress","Website"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unlike wordpress or other blog / websites, this one is all yours. Publish your work on a custom domain and host it in popular serverless JAMSTACK sites like netlify, surge.sh, heroku etc."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unlike wordpress or other blog / websites, this one is all yours. Publish your work on a custom domain and host it in popular serverless JAMSTACK sites like netlify, surge.sh, heroku etc."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Zypress is an open source app which means you can customize absolutely everything without having any andvanced programming skills or web design skills. Just by editing the simple config files listed below at the root of the project, you'll find straightforward controls for changing colors, navigation, logos and settings — so you can set your site up just how you like it."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"root/content/settings.json"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"root/nuxt.config.js"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"root/tailwind.config.js"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you're feeling a little more adventurous and if you have knowledge on Frontend development using node.js, any JAMSTACK frameworks then there's really no limit to what's possible. Zypress is built using Vue.js, Nuxt.js and Tailwid.css., learning and developing using these technologies are real fun and easy. Advanced developers can go even further and build a fullstack dynamic website by connecting to your REST or GraphQL APIs."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For now, you're probably just wondering what to do first. To help get you going as quickly as possible, I've populated the site with starter content (like this post!) and a Getting started developer userguide."}]},{"type":"element","tag":"h2","props":{"id":"references"},"children":[{"type":"text","value":"References"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://nuxtjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"Nuxt.js"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://content.nuxtjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"Nuxt/Content"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://tailwindcss.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Tailwind.css"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"references","depth":2,"text":"References"}]}},"_type":"markdown","_id":"content:blogs:all-about-zypress-a-blog-engine-in-a-single-binary.md","_source":"content","_file":"blogs/all-about-zypress-a-blog-engine-in-a-single-binary.md","_extension":"md"},{"_path":"/blogs/building-a-no-code-microorm-with-restful-api-for-duckdb","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Building a No-Code MicroORM with RESTful API for DuckDB","description":"Goduck, a dynamic REST API project implemented in Golang, draws inspiration from the innovative approaches of RillData and the robust reliability of MotherDuck. Goduck offers REST API capabilities for tables and models, following a Micro ORM design pattern akin to PostgREST. This documentation provides an in-depth overview of the project's unique features, technical design, and practical examples for harnessing its powerful capabilities.","date":"2023-08-27T12:00:00.000Z","published":true,"industries":[],"coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1693595703/senthilsweb.com/blog/senthilsweb-image-card_4_thm4gh.png","ogImage":"https://res.cloudinary.com/nathansweb/image/upload/v1693592651/senthilsweb.com/blog/goduck.png","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["Data Engineering","DuckDB","Golang"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Goduck, a dynamic REST API project implemented in Golang, draws inspiration from the innovative approaches of RillData and the robust reliability of MotherDuck. Goduck offers REST API capabilities for tables and models, following a Micro ORM design pattern akin to PostgREST. This documentation provides an in-depth overview of the project's unique features, technical design, and practical examples for harnessing its powerful capabilities."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Goduck, a dynamic REST API project implemented in Golang, draws inspiration from the innovative approaches of RillData and the robust reliability of MotherDuck. Goduck offers REST API capabilities for tables and models, following a Micro ORM design pattern akin to PostgREST. This documentation provides an in-depth overview of the project's unique features, technical design, and practical examples for harnessing its powerful capabilities."}]},{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Goduck, an open-source project I've created, simplifies your interaction with DuckDB by providing a RESTful API, which can dynamically handle CRUD (Create, Read, Update, Delete) operations on your database tables. This project is available on "},{"type":"element","tag":"a","props":{"href":"https://github.com/senthilsweb/goduck","rel":["nofollow"]},"children":[{"type":"text","value":"Github"}]},{"type":"text","value":". Taking inspiration from "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Postgrest"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"RillData"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"MotherDuck"}]},{"type":"text","value":", it offers a user-friendly experience for interacting with your DuckDB database through straightforward HTTP requests."}]},{"type":"element","tag":"h2","props":{"id":"technical-design-features"},"children":[{"type":"text","value":"Technical Design Features"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Goduck boasts the following key technical design features:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Dynamic Entity Handling:"}]},{"type":"text","value":" Goduck supports interaction with multiple entities (tables) within the DuckDB database without needing manual configuration for each entity."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Flexible Filtering and Sorting:"}]},{"type":"text","value":" Utilize query parameters to dynamically filter and sort data, enabling complex queries without explicitly writing SQL statements."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pagination Support:"}]},{"type":"text","value":" Control the number of returned records and their starting point using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"limit"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"offset"}]},{"type":"text","value":" query parameters."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"ActiveRecord Pattern:"}]},{"type":"text","value":" Goduck encourages the use of the ActiveRecord pattern, providing a seamless way to perform database operations using struct-like objects."}]}]},{"type":"element","tag":"h2","props":{"id":"environment-setup"},"children":[{"type":"text","value":"Environment Setup"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Before you run Goduck and interact with your DuckDB database, follow these steps:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Install DuckDB:"}]},{"type":"text","value":" Install DuckDB on your system. You can download it from the official DuckDB repository."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Create DuckDB Database:"}]},{"type":"text","value":" Use the provided Makefile to create a DuckDB database named "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"data.db"}]},{"type":"text","value":". This database will store your project data."},{"type":"element","tag":"pre","props":{"code":"make create-db\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"make create-db\n"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Create Sequence Table:"}]},{"type":"text","value":" Run the following SQL query to create a sequence table that will manage IDs for different entities."},{"type":"element","tag":"pre","props":{"code":"CREATE TABLE id_sequence (entity_name TEXT PRIMARY KEY, next_id INT);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"CREATE TABLE id_sequence (entity_name TEXT PRIMARY KEY, next_id INT);\n"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Run the Application:"}]},{"type":"text","value":" Once the environment is set up, run the Goduck application using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"go run app.go"}]},{"type":"text","value":". The REST API will be accessible at "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"http://localhost:8080"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h2","props":{"id":"example-bugs-entity"},"children":[{"type":"text","value":"Example: Bugs Entity"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For demonstration purposes, let's consider a table named \"bugs\" with the following columns:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"id"}]},{"type":"text","value":": ID of the bug (auto-generated)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"created_at"}]},{"type":"text","value":": Timestamp of bug creation"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"modified_at"}]},{"type":"text","value":": Timestamp of last modification"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"update_count"}]},{"type":"text","value":": Count of updates"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"title"}]},{"type":"text","value":": Title of the bug"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"description"}]},{"type":"text","value":": Description of the bug"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"status"}]},{"type":"text","value":": Current status of the bug"}]}]},{"type":"element","tag":"h3","props":{"id":"demo-data"},"children":[{"type":"text","value":"Demo Data"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here's an example of synthetic data for a bug:"}]},{"type":"element","tag":"pre","props":{"code":"{\n    \"created_at\": \"2023-08-29T21:03:23.545206Z\",\n    \"description\": \"This is a sample bug description.\",\n    \"id\": 1,\n    \"modified_at\": \"2023-08-29T21:18:31.477748Z\",\n    \"status\": \"Closed\",\n    \"title\": \"Sample Bug Title\",\n    \"update_count\": 2\n}\n","language":"json","meta":"","className":["language-json"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"created_at\": \"2023-08-29T21:03:23.545206Z\",\n    \"description\": \"This is a sample bug description.\",\n    \"id\": 1,\n    \"modified_at\": \"2023-08-29T21:18:31.477748Z\",\n    \"status\": \"Closed\",\n    \"title\": \"Sample Bug Title\",\n    \"update_count\": 2\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"example-endpoints"},"children":[{"type":"text","value":"Example Endpoints"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Create Bug:"}]},{"type":"element","tag":"pre","props":{"code":"POST http://localhost:8080/bugs\n","language":"http","meta":"","className":["language-http"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"POST http://localhost:8080/bugs\n"}]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"Send a JSON payload to create a new bug."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Get Bugs:"}]},{"type":"element","tag":"pre","props":{"code":"GET http://localhost:8080/bugs?limit=10&offset=0&select=title,description&status.eq=Open&title.like=Sample%&order=created_at.desc\n","language":"http","meta":"","className":["language-http"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"GET http://localhost:8080/bugs?limit=10&offset=0&select=title,description&status.eq=Open&title.like=Sample%&order=created_at.desc\n"}]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"Retrieve bugs based on filters, sorting, and pagination. In this example, bugs are sorted by "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"created_at"}]},{"type":"text","value":" in descending order."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Update Bug:"}]},{"type":"element","tag":"pre","props":{"code":"PUT http://localhost:8080/bugs/1\n","language":"http","meta":"","className":["language-http"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"PUT http://localhost:8080/bugs/1\n"}]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"Send a JSON payload to update a bug by ID."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Delete Bug:"}]},{"type":"element","tag":"pre","props":{"code":"DELETE http://localhost:8080/bugs/1\n","language":"http","meta":"","className":["language-http"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"DELETE http://localhost:8080/bugs/1\n"}]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"Delete a bug by ID."}]}]},{"type":"element","tag":"h2","props":{"id":"activerecord-pattern"},"children":[{"type":"text","value":"ActiveRecord Pattern"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Goduck encourages the use of the ActiveRecord pattern, where entities are represented as struct-like objects. This pattern simplifies database interactions by allowing you to create, update, and query entities in a more intuitive way. Check the Goduck codebase and examples for guidance on utilizing the ActiveRecord pattern effectively."}]},{"type":"element","tag":"h2","props":{"id":"acknowledgment"},"children":[{"type":"text","value":"Acknowledgment"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This project and its documentation have been developed through a collaborative effort. The majority of the code and documentation were generated by OpenAI's ChatGPT, an AI language model. The user has played a crucial role in reviewing, guiding, and enhancing the code and documentation provided by ChatGPT. This partnership has resulted in a comprehensive and functional REST API project."}]},{"type":"element","tag":"h2","props":{"id":"full-source-code"},"children":[{"type":"text","value":"Full Source Code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The full source code for this project is available on "},{"type":"element","tag":"a","props":{"href":"https://github.com/senthilsweb/goduck","rel":["nofollow"]},"children":[{"type":"text","value":"Github"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"technical-design-features","depth":2,"text":"Technical Design Features"},{"id":"environment-setup","depth":2,"text":"Environment Setup"},{"id":"example-bugs-entity","depth":2,"text":"Example: Bugs Entity","children":[{"id":"demo-data","depth":3,"text":"Demo Data"},{"id":"example-endpoints","depth":3,"text":"Example Endpoints"}]},{"id":"activerecord-pattern","depth":2,"text":"ActiveRecord Pattern"},{"id":"acknowledgment","depth":2,"text":"Acknowledgment"},{"id":"full-source-code","depth":2,"text":"Full Source Code"}]}},"_type":"markdown","_id":"content:blogs:building-a-no-code-microorm-with-restful-api-for-duckdb.md","_source":"content","_file":"blogs/building-a-no-code-microorm-with-restful-api-for-duckdb.md","_extension":"md"},{"_path":"/blogs/building-and-running-amd64-docker-containers-on-apple-m1","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Building and Running AMD64 Docker Containers on Apple M1","description":"Navigating through the challenge of running AMD64 Docker images on the ARM-based Apple M1 chip, and finding a solution that ensures seamless development across different architectures.","pageTitle":"Overcoming Architecture Challenges: AMD64 on Apple M1","date":"2023-10-21T12:00:00.000Z","published":true,"industries":["Technology","Development","Docker"],"coverimage":"https://images.unsplash.com/photo-1602992708529-c9fdb12905c9?auto=format&fit=crop&q=80&w=3540&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","ogImage":"https://images.unsplash.com/photo-1602992708529-c9fdb12905c9?auto=format&fit=crop&q=80&w=3540&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["Docker","Apple M1","Development"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The introduction of Apple's M1 chip, operating on the ARM64 architecture, presented developers with unique challenges. The primary obstacle was the compatibility between standard Docker images (built for x86_64 or AMD64 architecture) and the ARM-based M1 chip. Here, we dive into my personal journey of containerizing a Go application and ensuring it runs smoothly on an Apple M1 MacBook Pro."}]},{"type":"element","tag":"h2","props":{"id":"problem-statement"},"children":[{"type":"text","value":"Problem Statement"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Building and running Docker containers for applications is a daily task for many developers. Yet, architectural differences can throw a wrench in these processes. My challenge was to run a Go application in a Docker container, primarily built for the AMD64 architecture, on an Apple M1 chip. Adding to the complexity, the application relied on a configuration file residing in the same directory as the binary."}]},{"type":"element","tag":"h2","props":{"id":"the-journey-to-a-solution"},"children":[{"type":"text","value":"The Journey to a Solution"}]},{"type":"element","tag":"h3","props":{"id":"_1-initial-hiccups"},"children":[{"type":"text","value":"1. Initial Hiccups"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"My initial attempt to use the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"ubuntu:latest"}]},{"type":"text","value":" image yielded compatibility error messages like:"}]},{"type":"element","tag":"pre","props":{"code":"qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_2-cross-platform-docker-builds"},"children":[{"type":"text","value":"2. Cross-Platform Docker Builds"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I leveraged Docker's "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"--platform"}]},{"type":"text","value":" flag, setting it to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"linux/amd64"}]},{"type":"text","value":", to build images compatible with the QEMU emulator on Docker Desktop for Mac on M1 machines."}]},{"type":"element","tag":"h3","props":{"id":"_3-viper-configuration"},"children":[{"type":"text","value":"3. Viper & Configuration"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Using the Viper library in Go, I ensured seamless configuration management. Setting the Dockerfile's working directory and using relative paths allowed Viper to identify and utilize the configuration file effectively."}]},{"type":"element","tag":"h3","props":{"id":"_4-docker-compose-for-ease-of-use"},"children":[{"type":"text","value":"4. Docker-Compose for Ease of Use"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Docker Compose simplified building, running, and managing the application within a Docker container. Through a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":" file, I was able to establish a consistent execution environment for the application."}]},{"type":"element","tag":"h3","props":{"id":"source-codes"},"children":[{"type":"text","value":"Source Codes"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"problem-statement","depth":2,"text":"Problem Statement"},{"id":"the-journey-to-a-solution","depth":2,"text":"The Journey to a Solution","children":[{"id":"_1-initial-hiccups","depth":3,"text":"1. Initial Hiccups"},{"id":"_2-cross-platform-docker-builds","depth":3,"text":"2. Cross-Platform Docker Builds"},{"id":"_3-viper-configuration","depth":3,"text":"3. Viper & Configuration"},{"id":"_4-docker-compose-for-ease-of-use","depth":3,"text":"4. Docker-Compose for Ease of Use"},{"id":"source-codes","depth":3,"text":"Source Codes"}]}]}},"_type":"markdown","_id":"content:blogs:building-and-running-amd64-docker-containers-on-apple-m1.md","_source":"content","_file":"blogs/building-and-running-amd64-docker-containers-on-apple-m1.md","_extension":"md"},{"_path":"/blogs/converting-pdf-to-png-images-with-ocr-using-docker-and-tesseract","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Building and Running AMD64 Docker Containers on Apple M1","description":"Navigating through the challenge of running AMD64 Docker images on the ARM-based Apple M1 chip, and finding a solution that ensures seamless development across different architectures.","pageTitle":"Overcoming Architecture Challenges: AMD64 on Apple M1","date":"2023-10-21T12:00:00.000Z","published":true,"industries":["Technology","Development","Docker"],"coverimage":"https://images.unsplash.com/photo-1602992708529-c9fdb12905c9?auto=format&fit=crop&q=80&w=3540&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","ogImage":"https://images.unsplash.com/photo-1602992708529-c9fdb12905c9?auto=format&fit=crop&q=80&w=3540&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["Docker","Apple M1","Development"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The introduction of Apple's M1 chip, operating on the ARM64 architecture, presented developers with unique challenges. The primary obstacle was the compatibility between standard Docker images (built for x86_64 or AMD64 architecture) and the ARM-based M1 chip. Here, we dive into my personal journey of containerizing a Go application and ensuring it runs smoothly on an Apple M1 MacBook Pro."}]},{"type":"element","tag":"h2","props":{"id":"problem-statement"},"children":[{"type":"text","value":"Problem Statement"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Building and running Docker containers for applications is a daily task for many developers. Yet, architectural differences can throw a wrench in these processes. My challenge was to run a Go application in a Docker container, primarily built for the AMD64 architecture, on an Apple M1 chip. Adding to the complexity, the application relied on a configuration file residing in the same directory as the binary."}]},{"type":"element","tag":"h2","props":{"id":"the-journey-to-a-solution"},"children":[{"type":"text","value":"The Journey to a Solution"}]},{"type":"element","tag":"h3","props":{"id":"_1-initial-hiccups"},"children":[{"type":"text","value":"1. Initial Hiccups"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"My initial attempt to use the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"ubuntu:latest"}]},{"type":"text","value":" image yielded compatibility error messages like:"}]},{"type":"element","tag":"pre","props":{"code":"qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_2-cross-platform-docker-builds"},"children":[{"type":"text","value":"2. Cross-Platform Docker Builds"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I leveraged Docker's "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"--platform"}]},{"type":"text","value":" flag, setting it to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"linux/amd64"}]},{"type":"text","value":", to build images compatible with the QEMU emulator on Docker Desktop for Mac on M1 machines."}]},{"type":"element","tag":"h3","props":{"id":"_3-viper-configuration"},"children":[{"type":"text","value":"3. Viper & Configuration"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Using the Viper library in Go, I ensured seamless configuration management. Setting the Dockerfile's working directory and using relative paths allowed Viper to identify and utilize the configuration file effectively."}]},{"type":"element","tag":"h3","props":{"id":"_4-docker-compose-for-ease-of-use"},"children":[{"type":"text","value":"4. Docker-Compose for Ease of Use"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Docker Compose simplified building, running, and managing the application within a Docker container. Through a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":" file, I was able to establish a consistent execution environment for the application."}]},{"type":"element","tag":"h3","props":{"id":"source-codes"},"children":[{"type":"text","value":"Source Codes"}]},{"type":"element","tag":"h4","props":{"id":"dockerfile"},"children":[{"type":"text","value":"Dockerfile"}]},{"type":"element","tag":"pre","props":{"code":"# Use a valid Go version\nFROM golang:1.17 AS builder\n\n# Install dependencies if any\nRUN apt-get update && apt-get install -y gcc\n\n# Set your working directory inside the container\nWORKDIR /go/src/github.com/org/repo\n\n# Copy your code into the container\nCOPY . .\n\n# List the contents (for debugging)\nRUN ls -al\n\n# Build the Go application\n# If you're building for a different architecture, you'd set GOARCH accordingly.\nRUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o templrgo .\n\n# The command to run when the container starts\nCMD [\"/go/src/github.com/org/repo/templrgo\", \"-p\", \"8182\"]\n","language":"dockerfile","meta":"","className":["language-dockerfile"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# Use a valid Go version\nFROM golang:1.17 AS builder\n\n# Install dependencies if any\nRUN apt-get update && apt-get install -y gcc\n\n# Set your working directory inside the container\nWORKDIR /go/src/github.com/org/repo\n\n# Copy your code into the container\nCOPY . .\n\n# List the contents (for debugging)\nRUN ls -al\n\n# Build the Go application\n# If you're building for a different architecture, you'd set GOARCH accordingly.\nRUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o templrgo .\n\n# The command to run when the container starts\nCMD [\"/go/src/github.com/org/repo/templrgo\", \"-p\", \"8182\"]\n"}]}]},{"type":"element","tag":"h4","props":{"id":"github-action-for-cross-platform-builds"},"children":[{"type":"text","value":"Github action for cross-platform builds"}]},{"type":"element","tag":"pre","props":{"code":"name: Build and Push Docker Image\n\non:\n  push:\n    branches:\n      - main # or whichever branch you'd like\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: 1.17 # specify the desired version\n\n    - name: Compile Go for linux/amd64\n      run: |\n        GOOS=linux GOARCH=amd64 go build -o templrjs_server-linux-amd64\n\n    - name: Set up Docker Buildx\n      id: buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Login to DockerHub\n      uses: docker/login-action@v1 \n      with:\n        username: ${{ secrets.DOCKERHUB_USERNAME }}\n        password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n    - name: Build and push\n      id: docker_build\n      uses: docker/build-push-action@v2\n      with:\n        context: .\n        file: ./Dockerfile\n        platforms: linux/amd64\n        push: true\n        tags: |\n          ${{ secrets.DOCKERHUB_USERNAME }}/templrjs:latest\n          ${{ secrets.DOCKERHUB_USERNAME }}/templrjs:${{ github.sha }}\n          ${{ secrets.DOCKERHUB_USERNAME }}/templrjs:build-${{ github.run_id }}\n","language":"yaml","meta":"","className":["language-yaml"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"name: Build and Push Docker Image\n\non:\n  push:\n    branches:\n      - main # or whichever branch you'd like\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: 1.17 # specify the desired version\n\n    - name: Compile Go for linux/amd64\n      run: |\n        GOOS=linux GOARCH=amd64 go build -o templrjs_server-linux-amd64\n\n    - name: Set up Docker Buildx\n      id: buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Login to DockerHub\n      uses: docker/login-action@v1 \n      with:\n        username: ${{ secrets.DOCKERHUB_USERNAME }}\n        password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n    - name: Build and push\n      id: docker_build\n      uses: docker/build-push-action@v2\n      with:\n        context: .\n        file: ./Dockerfile\n        platforms: linux/amd64\n        push: true\n        tags: |\n          ${{ secrets.DOCKERHUB_USERNAME }}/templrjs:latest\n          ${{ secrets.DOCKERHUB_USERNAME }}/templrjs:${{ github.sha }}\n          ${{ secrets.DOCKERHUB_USERNAME }}/templrjs:build-${{ github.run_id }}\n"}]}]},{"type":"element","tag":"h4","props":{"id":"docker-compose-file"},"children":[{"type":"text","value":"Docker compose file"}]},{"type":"element","tag":"pre","props":{"code":"version: '3'\n\nservices:\n  templrjs_server:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    image: templrjs\n    ports:\n      - \"5000:8080\"\n    volumes:\n      - ./:/app/\n","language":"yaml","meta":"","className":["language-yaml"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"version: '3'\n\nservices:\n  templrjs_server:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    image: templrjs\n    ports:\n      - \"5000:8080\"\n    volumes:\n      - ./:/app/\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"problem-statement","depth":2,"text":"Problem Statement"},{"id":"the-journey-to-a-solution","depth":2,"text":"The Journey to a Solution","children":[{"id":"_1-initial-hiccups","depth":3,"text":"1. Initial Hiccups"},{"id":"_2-cross-platform-docker-builds","depth":3,"text":"2. Cross-Platform Docker Builds"},{"id":"_3-viper-configuration","depth":3,"text":"3. Viper & Configuration"},{"id":"_4-docker-compose-for-ease-of-use","depth":3,"text":"4. Docker-Compose for Ease of Use"},{"id":"source-codes","depth":3,"text":"Source Codes"}]}]}},"_type":"markdown","_id":"content:blogs:converting-pdf-to-png-images-with-ocr-using-docker-and-tesseract.md","_source":"content","_file":"blogs/converting-pdf-to-png-images-with-ocr-using-docker-and-tesseract.md","_extension":"md"},{"_path":"/blogs/free-lightweight-online-duckdb-sql-query-editor-in-nuxtjs-and-tailwind-css","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Free Lightweight Online DuckDB SQL Query Editor in NuxtJS and Tailwind CSS","description":"In the world of data management, having the right tools can make all the difference. As a developer, you often find yourself working with databases and writing SQL queries to retrieve, manipulate, and analyze data.","date":"2023-08-30T12:00:00.000Z","published":true,"industries":[],"coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1693619846/senthilsweb.com/blog/sql-editor-duckdb.png","ogImage":"https://res.cloudinary.com/nathansweb/image/upload/v1693619846/senthilsweb.com/blog/sql-editor-duckdb.png","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["IDE","Utility","TemplrJS","SQL","DuckDB","Data Engineering"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the world of data management, having the right tools can make all the difference. As a developer, you often find yourself working with databases and writing SQL queries to retrieve, manipulate, and analyze data."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the world of data management, having the right tools can make all the difference. As a developer, you often find yourself working with databases and writing SQL queries to retrieve, manipulate, and analyze data."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Enter Goduck - a powerful open-source project that simplifies your interaction with DuckDB, an efficient analytical database. In this blog post, we'll take you on a journey through the creation of a web-based DuckDB SQL query editor, inspired by popular tools like PostgREST, to help you boost your SQL workflow."}]},{"type":"element","tag":"h2","props":{"id":"the-need-for-a-duckdb-sql-query-editor"},"children":[{"type":"text","value":"The Need for a DuckDB SQL Query Editor"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As a developer, you might have encountered scenarios where you needed a quick and efficient way to interact with your DuckDB database. Traditional database management tools can be cumbersome, and you may not always want to write SQL queries in a text editor. That's where Goduck comes to the rescue. It offers a user-friendly web interface that simplifies SQL query execution, providing a seamless experience similar to PostgREST."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"background","src":"https://res.cloudinary.com/nathansweb/image/upload/v1693619846/senthilsweb.com/blog/sql-editor-duckdb.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"technology-stack"},"children":[{"type":"text","value":"Technology Stack"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Goduck leverages a robust technology stack to provide its powerful capabilities:"}]},{"type":"element","tag":"h3","props":{"id":"server"},"children":[{"type":"text","value":"Server"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"icon","props":{"name":"logos:go"},"children":[]},{"type":"text","value":" Golang"}]}]},{"type":"element","tag":"h3","props":{"id":"front-end"},"children":[{"type":"text","value":"Front End"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"icon","props":{"name":"logos:nuxt-icon"},"children":[]},{"type":"text","value":" NuxtJS"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"icon","props":{"name":"logos:tailwindcss-icon"},"children":[]},{"type":"text","value":" Tailwind CSS"}]}]},{"type":"element","tag":"h2","props":{"id":"key-features-of-goduck"},"children":[{"type":"text","value":"Key Features of Goduck"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"No-Code MicroORM"}]},{"type":"text","value":": Goduck employs a no-code approach, making it easy for developers of all skill levels to work with DuckDB. You can interact with database tables and models effortlessly, thanks to the active record pattern."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"RESTful API"}]},{"type":"text","value":": Goduck exposes a RESTful API that dynamically handles CRUD (Create, Read, Update, Delete) operations on your database tables. This means you can perform operations like fetching data, updating records, and more with simple HTTP requests."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Inspired by PostgREST"}]},{"type":"text","value":": Taking inspiration from the popular PostgREST tool, Goduck ensures a familiar and user-friendly experience when interacting with your DuckDB database."}]}]},{"type":"element","tag":"h2","props":{"id":"exploring-the-goduck-interface"},"children":[{"type":"text","value":"Exploring the Goduck Interface"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Goduck web-based SQL query editor offers an intuitive interface designed to enhance your productivity. Here's a quick overview of what you'll find:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Code Editor"}]},{"type":"text","value":": A powerful code editor based on Codemirror, with syntax highlighting and code completion features. It allows you to write and execute SQL queries effortlessly."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Dynamic Data Table"}]},{"type":"text","value":": When you execute a query, Goduck presents the results in a dynamic data table. You can easily browse, filter, and analyze the retrieved data."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pagination"}]},{"type":"text","value":": Goduck supports pagination, ensuring that you can navigate through large datasets with ease."}]}]},{"type":"element","tag":"h2","props":{"id":"getting-started-with-goduck"},"children":[{"type":"text","value":"Getting Started with Goduck"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To get started with Goduck, you can access the project on "},{"type":"element","tag":"a","props":{"href":"https://github.com/senthilsweb/goduck","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub"}]},{"type":"text","value":". The documentation provides step-by-step instructions on setting up and using the web-based DuckDB SQL query editor."}]},{"type":"element","tag":"h2","props":{"id":"full-source-code"},"children":[{"type":"text","value":"Full Source code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/senthilsweb/templrjs/blob/main/pages/query-editor/index.vue","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub"}]}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"pre","props":{"className":["language-html"],"code":"<template>\n<NuxtLayout name=\"landing\">\n  <div class=\"bg-white\">\n    <div class=\"flex\">\n      <client-only placeholder=\"Codemirror Loading...\">\n        <codemirror :value=\"code\" @ready=\"handleReady\" @change=\"handleCodeChange\" @focus=\"handleCodeFocus\" @blur=\"handleCodeBlur\" placeholder=\"Select * from users limit 25\" :style=\"{ height: '200px', width: '100%' }\" :autofocus=\"true\" :indent-with-tab=\"true\" :tab-size=\"2\" :extensions=\"extensions\" />\n      </client-only>\n    </div>\n    <footer class=\"border-t flex justify-end px-5 py-4\">\n      <button @click=\"clear\" class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Clear</button>\n      &nbsp;\n      <button @click=\"execute\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Execute</button>\n    </footer>\n  </div>\n\n  <!-- Dynamic Data Table -->\n  <div class=\"gap-y-3\" v-if=\"isDataTableVisible\">\n    <div class=\"bg-gray-900 rounded-lg\">\n      <div class=\"mx-auto max-w-7xl p-8\">\n        <div class=\"bg-gray-900\">\n          <div class=\"flow-root\">\n            <div class=\"-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n              <div class=\"inline-block min-w-full align-middle sm:px-6 lg:px-8\">\n                <table class=\"min-w-full divide-y divide-gray-700\">\n                  <thead>\n                    <tr>\n                      <th v-for=\"column in tableColumns\" :key=\"column.field\" class=\"whitespace-nowrap py-3.5 px-4 text-left text-sm font-semibold text-white sm:pl-0\">{{ column.label }}</th>\n                      <th scope=\"col\" class=\"relative py-3.5 pl-3 pr-4 sm:pr-0\">\n                        <span class=\"sr-only\">Edit</span>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody class=\"divide-y divide-gray-800\">\n                    <tr v-for=\"item in currentPageData\" :key=\"item.id\">\n                      <td v-for=\"column in tableColumns\" :key=\"column.field\" class=\"whitespace-nowrap text-left text-sm text-gray-300\">{{ item[column.field] }}</td>\n                      <td class=\"relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-0\">\n                        <!--<a href=\"#\" class=\"text-indigo-400 hover:text-indigo-300\"\n                          >Edit<span class=\"sr-only\">, {{ item.name }}</span></a\n                        >-->\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Pagination -->\n    <div class=\"mt-4 hidden sm:flex sm:flex-1 sm:items-center sm:justify-between\">\n      <div>\n        <p class=\"text-sm text-gray-700\">\n          Showing\n          <span class=\"font-medium\">{{ $s.numberFormat((currentPage - 1) * itemsPerPage + 1, 0, '.', ',') }}</span>\n          to\n          <span class=\"font-medium\">{{ $s.numberFormat(Math.min(currentPage * itemsPerPage, tableData.total_rows), 0, '.', ',') }}</span>\n          of\n          <span class=\"font-medium\">{{ $s.numberFormat(tableData.total_rows, 0, '.', ',') }}</span>\n        </p>\n      </div>\n\n      <div>\n        <!-- Pagination Links -->\n        <nav class=\"inline-flex -space-x-px rounded-md shadow-sm\" aria-label=\"Pagination\" id=\"nav_pagination\">\n          <a href=\"#\" @click.prevent=\"goToPage(currentPage - 1)\" id=\"prev_page\" class=\"relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0\">\n            <span class=\"sr-only\">Previous</span>\n            <svg class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n              <path fill-rule=\"evenodd\" d=\"M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z\" clip-rule=\"evenodd\" />\n            </svg>\n          </a>\n\n          <!-- ... Loop through paginationLinks ... -->\n          <template v-for=\"pageLink in paginationLinks\">\n            <a v-if=\"pageLink <= totalPages\" :key=\"pageLink\" href=\"#\" :class=\"pageLinkClasses(pageLink)\" :id=\"`pg_${pageLink}`\" @click.prevent=\"goToPage(pageLink)\">\n              {{ pageLink }}\n            </a>\n          </template>\n\n          <a v-if=\"currentPage < totalPages\" href=\"#\" @click.prevent=\"goToPage(currentPage + 1)\" id=\"next_page\" class=\"relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0\">\n            <span class=\"sr-only\">Next</span>\n            <svg class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n              <path fill-rule=\"evenodd\" d=\"M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z\" clip-rule=\"evenodd\" />\n            </svg>\n          </a>\n        </nav>\n      </div>\n    </div>\n    <div>&nbsp;</div>\n  </div>\n</NuxtLayout>\n</template>\n","filename":"NuxtJS + Tailwind CSS","language":"html","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n<NuxtLayout name=\"landing\">\n  <div class=\"bg-white\">\n    <div class=\"flex\">\n      <client-only placeholder=\"Codemirror Loading...\">\n        <codemirror :value=\"code\" @ready=\"handleReady\" @change=\"handleCodeChange\" @focus=\"handleCodeFocus\" @blur=\"handleCodeBlur\" placeholder=\"Select * from users limit 25\" :style=\"{ height: '200px', width: '100%' }\" :autofocus=\"true\" :indent-with-tab=\"true\" :tab-size=\"2\" :extensions=\"extensions\" />\n      </client-only>\n    </div>\n    <footer class=\"border-t flex justify-end px-5 py-4\">\n      <button @click=\"clear\" class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Clear</button>\n      &nbsp;\n      <button @click=\"execute\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Execute</button>\n    </footer>\n  </div>\n\n  <!-- Dynamic Data Table -->\n  <div class=\"gap-y-3\" v-if=\"isDataTableVisible\">\n    <div class=\"bg-gray-900 rounded-lg\">\n      <div class=\"mx-auto max-w-7xl p-8\">\n        <div class=\"bg-gray-900\">\n          <div class=\"flow-root\">\n            <div class=\"-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n              <div class=\"inline-block min-w-full align-middle sm:px-6 lg:px-8\">\n                <table class=\"min-w-full divide-y divide-gray-700\">\n                  <thead>\n                    <tr>\n                      <th v-for=\"column in tableColumns\" :key=\"column.field\" class=\"whitespace-nowrap py-3.5 px-4 text-left text-sm font-semibold text-white sm:pl-0\">{{ column.label }}</th>\n                      <th scope=\"col\" class=\"relative py-3.5 pl-3 pr-4 sm:pr-0\">\n                        <span class=\"sr-only\">Edit</span>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody class=\"divide-y divide-gray-800\">\n                    <tr v-for=\"item in currentPageData\" :key=\"item.id\">\n                      <td v-for=\"column in tableColumns\" :key=\"column.field\" class=\"whitespace-nowrap text-left text-sm text-gray-300\">{{ item[column.field] }}</td>\n                      <td class=\"relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-0\">\n                        <!--<a href=\"#\" class=\"text-indigo-400 hover:text-indigo-300\"\n                          >Edit<span class=\"sr-only\">, {{ item.name }}</span></a\n                        >-->\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Pagination -->\n    <div class=\"mt-4 hidden sm:flex sm:flex-1 sm:items-center sm:justify-between\">\n      <div>\n        <p class=\"text-sm text-gray-700\">\n          Showing\n          <span class=\"font-medium\">{{ $s.numberFormat((currentPage - 1) * itemsPerPage + 1, 0, '.', ',') }}</span>\n          to\n          <span class=\"font-medium\">{{ $s.numberFormat(Math.min(currentPage * itemsPerPage, tableData.total_rows), 0, '.', ',') }}</span>\n          of\n          <span class=\"font-medium\">{{ $s.numberFormat(tableData.total_rows, 0, '.', ',') }}</span>\n        </p>\n      </div>\n\n      <div>\n        <!-- Pagination Links -->\n        <nav class=\"inline-flex -space-x-px rounded-md shadow-sm\" aria-label=\"Pagination\" id=\"nav_pagination\">\n          <a href=\"#\" @click.prevent=\"goToPage(currentPage - 1)\" id=\"prev_page\" class=\"relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0\">\n            <span class=\"sr-only\">Previous</span>\n            <svg class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n              <path fill-rule=\"evenodd\" d=\"M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z\" clip-rule=\"evenodd\" />\n            </svg>\n          </a>\n\n          <!-- ... Loop through paginationLinks ... -->\n          <template v-for=\"pageLink in paginationLinks\">\n            <a v-if=\"pageLink <= totalPages\" :key=\"pageLink\" href=\"#\" :class=\"pageLinkClasses(pageLink)\" :id=\"`pg_${pageLink}`\" @click.prevent=\"goToPage(pageLink)\">\n              {{ pageLink }}\n            </a>\n          </template>\n\n          <a v-if=\"currentPage < totalPages\" href=\"#\" @click.prevent=\"goToPage(currentPage + 1)\" id=\"next_page\" class=\"relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0\">\n            <span class=\"sr-only\">Next</span>\n            <svg class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n              <path fill-rule=\"evenodd\" d=\"M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z\" clip-rule=\"evenodd\" />\n            </svg>\n          </a>\n        </nav>\n      </div>\n    </div>\n    <div>&nbsp;</div>\n  </div>\n</NuxtLayout>\n</template>\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"\n<script setup>\nimport { Codemirror } from 'vue-codemirror';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { EditorState } from '@codemirror/state';\nimport _ from 'lodash';\nconst extensions = [javascript(), oneDark];\n// Codemirror EditorView instance ref\nconst view = shallowRef();\nconst isExecuting = ref(false); // Reactive variable to track execution state\nconst isDataTableVisible = ref(false); // Default to false\n\n// Status is available at all times via Codemirror EditorView\nconst getCodemirrorStates = () => {\nconst state = view.value.state;\nconst ranges = state.selection.ranges;\nconst selected = ranges.reduce((r, range) => r + range.to - range.from, 0);\nconst cursor = ranges[0].anchor;\nconst length = state.doc.length;\nconst lines = state.doc.lines;\n// more state info ...\n// return ...\n};\n\nconst handleReady = (payload) => {\nview.value = payload.view;\n};\n\nconst handleCodeChange = (newValue) => {\n// Handle code change event here\n// For example, you might want to update the 'code' data property\ncode.value = newValue;\n};\n\nconst handleCodeFocus = (event) => {\n// Handle code focus event here\n};\n\nconst handleCodeBlur = (event) => {\n// Handle code blur event here\n};\n\nconst clear = () => {\n// Clear the code in the codemirror editor\nif (view.value) {\n  view.value.dispatch({ changes: { from: 0, to: view.value.state.doc.length, insert: '' } });\n}\n};\n\nconst execute = () => {\n// Execute the code from the codemirror editor\nconst codeToExecute = view.value ? view.value.state.doc.toString() : '';\n\n// Update the 'code' ref with the code to execute\ncode.value = codeToExecute;\n\n// Call fetchDataForPage(1) to trigger data fetching based on the code\nfetchDataForPage(1);\n};\n\nconst isCodeEmpty = computed(() => {\nreturn !view.value || view.value.state.doc.length === 0;\n});\n\n// Initialize your 'code' data property here\nconst code = ref(''); // Initialize with your default code\n\n//--------------------------------------------------------------------------Data Table\n\n// Initialize current page data with the first page\n\nconst currentPageData = ref([]);\n\nlet currentPage = 1; // Initialize currentPage to 1\nconst totalPages = ref(0);\nconst tableData = ref({});\nconst tableColumns = ref([]);\nconst paginationLinks = ref([]);\n\nconst fetchDataForPage = async (page) => {\n// Make sure the code is not empty before fetching data\nif (!isCodeEmpty.value) {\n  // Construct the dynamic API endpoint based on the code entered\n  //const dynamicEndpoint = `http://localhost:8080/${code.value}?limit=${itemsPerPage}&offset=${(page - 1) * itemsPerPage}`;\n\n  try {\n    isDataTableVisible.value = true;\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: { query: code.value },\n    };\n\n    //const response = await $fetch(dynamicEndpoint);\n\n    const response = await $fetch('http://localhost:8080/execute-query', requestOptions);\n    //const responseData = await response.json();\n\n    if (response && response.data && Array.isArray(response.data)) {\n      const startIndex = (page - 1) * itemsPerPage;\n      const endIndex = startIndex + itemsPerPage;\n      currentPageData.value = response.data.slice(startIndex, endIndex);\n      tableData.value = response;\n      console.log('tableData=', tableData.value);\n      currentPage = page; // Update currentPage when a page is clicked\n      const totalRows = response.total_rows;\n      totalPages.value = Math.ceil(totalRows / itemsPerPage); // Corrected calculation\n\n      // Build dynamic column definitions from JSON response attributes\n      tableColumns.value = Object.keys(response.data[0]).map((attribute) => {\n        return {\n          label: _.startCase(attribute),\n          field: attribute,\n        };\n      });\n\n      // Calculate pagination links\n      paginationLinks.value = Array.from({ length: totalPages.value }, (_, index) => index + 1);\n\n      console.log('paginationLinks=', JSON.stringify(paginationLinks.value));\n\n      updatePaginationLinks(currentPage, totalRows); // Pass totalRows instead of response.data.total_rows\n    } else {\n      useNuxtApp().$toast.show({\n        type: 'danger',\n        message: 'Invalid response format or data.',\n        position: 'top-left',\n        timeout: 2000,\n      });\n      console.error('Invalid response format or data.');\n    }\n  } catch (error) {\n    console.error(error);\n    useNuxtApp().$toast.show({\n      type: 'danger',\n      message: error,\n      position: 'top-left',\n      timeout: 2000,\n    });\n  }\n}\n};\n\nconst itemsPerPage = 25; // Set the number of items per page\nconst maxPaginationLinks = 10; // Set the maximum number of pagination links\n\nconst updatePaginationLinks = (currentPage, totalRows) => {\nconsole.log('updatePaginationLinks - currentPage:', currentPage);\nconsole.log('updatePaginationLinks - totalRows:', totalRows);\n\nconst totalPageCount = Math.ceil(totalRows / itemsPerPage);\nconsole.log('updatePaginationLinks - totalPageCount:', totalPageCount);\n\n// Calculate middlePage and adjust it if it exceeds totalPageCount\nconst pageLinksToShow = Math.min(totalPageCount, maxPaginationLinks);\nconst middlePage = Math.floor(pageLinksToShow / 2);\nconsole.log('updatePaginationLinks - middlePage:', middlePage);\n\n// Calculate startPage and endPage considering middlePage and totalPageCount\nlet startPage = Math.max(1, currentPage - middlePage);\nlet endPage = Math.min(totalPageCount, currentPage + middlePage);\n\n// Adjust startPage and endPage to ensure they stay within bounds\nif (endPage - startPage + 1 > pageLinksToShow) {\n  if (currentPage <= middlePage) {\n    endPage = startPage + pageLinksToShow - 1;\n  } else if (totalPageCount - currentPage < middlePage) {\n    startPage = totalPageCount - pageLinksToShow + 1;\n  } else {\n    startPage = currentPage - Math.floor(pageLinksToShow / 2);\n    endPage = startPage + pageLinksToShow - 1;\n  }\n}\n\npaginationLinks.value = Array.from({ length: endPage - startPage + 1 }, (_, index) => startPage + index);\n\nconsole.log('updatePaginationLinks - paginationLinks:', paginationLinks.value);\n};\n\n// Function to determine pagination link classes\nconst pageLinkClasses = (pageLink) => {\nconst baseClasses = 'relative inline-flex items-center px-4 py-2 text-sm font-semibold ring-1 ring-inset ring-gray-300 focus:outline-offset-0';\nif (pageLink === currentPage) {\n  return `${baseClasses} bg-indigo-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600`;\n} else {\n  return `${baseClasses} text-gray-900 hover:bg-gray-50 focus:z-20 focus:outline-offset-0`;\n}\n};\n\nconst goToPage = async (page) => {\nif (page < 1 || page > paginationLinks.length) {\n  return; // Don't go out of bounds\n}\nfetchDataForPage(page);\n};\n\nonMounted(() => {});\n</script>\n","filename":"JavaScript","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n<script setup>\nimport { Codemirror } from 'vue-codemirror';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { EditorState } from '@codemirror/state';\nimport _ from 'lodash';\nconst extensions = [javascript(), oneDark];\n// Codemirror EditorView instance ref\nconst view = shallowRef();\nconst isExecuting = ref(false); // Reactive variable to track execution state\nconst isDataTableVisible = ref(false); // Default to false\n\n// Status is available at all times via Codemirror EditorView\nconst getCodemirrorStates = () => {\nconst state = view.value.state;\nconst ranges = state.selection.ranges;\nconst selected = ranges.reduce((r, range) => r + range.to - range.from, 0);\nconst cursor = ranges[0].anchor;\nconst length = state.doc.length;\nconst lines = state.doc.lines;\n// more state info ...\n// return ...\n};\n\nconst handleReady = (payload) => {\nview.value = payload.view;\n};\n\nconst handleCodeChange = (newValue) => {\n// Handle code change event here\n// For example, you might want to update the 'code' data property\ncode.value = newValue;\n};\n\nconst handleCodeFocus = (event) => {\n// Handle code focus event here\n};\n\nconst handleCodeBlur = (event) => {\n// Handle code blur event here\n};\n\nconst clear = () => {\n// Clear the code in the codemirror editor\nif (view.value) {\n  view.value.dispatch({ changes: { from: 0, to: view.value.state.doc.length, insert: '' } });\n}\n};\n\nconst execute = () => {\n// Execute the code from the codemirror editor\nconst codeToExecute = view.value ? view.value.state.doc.toString() : '';\n\n// Update the 'code' ref with the code to execute\ncode.value = codeToExecute;\n\n// Call fetchDataForPage(1) to trigger data fetching based on the code\nfetchDataForPage(1);\n};\n\nconst isCodeEmpty = computed(() => {\nreturn !view.value || view.value.state.doc.length === 0;\n});\n\n// Initialize your 'code' data property here\nconst code = ref(''); // Initialize with your default code\n\n//--------------------------------------------------------------------------Data Table\n\n// Initialize current page data with the first page\n\nconst currentPageData = ref([]);\n\nlet currentPage = 1; // Initialize currentPage to 1\nconst totalPages = ref(0);\nconst tableData = ref({});\nconst tableColumns = ref([]);\nconst paginationLinks = ref([]);\n\nconst fetchDataForPage = async (page) => {\n// Make sure the code is not empty before fetching data\nif (!isCodeEmpty.value) {\n  // Construct the dynamic API endpoint based on the code entered\n  //const dynamicEndpoint = `http://localhost:8080/${code.value}?limit=${itemsPerPage}&offset=${(page - 1) * itemsPerPage}`;\n\n  try {\n    isDataTableVisible.value = true;\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: { query: code.value },\n    };\n\n    //const response = await $fetch(dynamicEndpoint);\n\n    const response = await $fetch('http://localhost:8080/execute-query', requestOptions);\n    //const responseData = await response.json();\n\n    if (response && response.data && Array.isArray(response.data)) {\n      const startIndex = (page - 1) * itemsPerPage;\n      const endIndex = startIndex + itemsPerPage;\n      currentPageData.value = response.data.slice(startIndex, endIndex);\n      tableData.value = response;\n      console.log('tableData=', tableData.value);\n      currentPage = page; // Update currentPage when a page is clicked\n      const totalRows = response.total_rows;\n      totalPages.value = Math.ceil(totalRows / itemsPerPage); // Corrected calculation\n\n      // Build dynamic column definitions from JSON response attributes\n      tableColumns.value = Object.keys(response.data[0]).map((attribute) => {\n        return {\n          label: _.startCase(attribute),\n          field: attribute,\n        };\n      });\n\n      // Calculate pagination links\n      paginationLinks.value = Array.from({ length: totalPages.value }, (_, index) => index + 1);\n\n      console.log('paginationLinks=', JSON.stringify(paginationLinks.value));\n\n      updatePaginationLinks(currentPage, totalRows); // Pass totalRows instead of response.data.total_rows\n    } else {\n      useNuxtApp().$toast.show({\n        type: 'danger',\n        message: 'Invalid response format or data.',\n        position: 'top-left',\n        timeout: 2000,\n      });\n      console.error('Invalid response format or data.');\n    }\n  } catch (error) {\n    console.error(error);\n    useNuxtApp().$toast.show({\n      type: 'danger',\n      message: error,\n      position: 'top-left',\n      timeout: 2000,\n    });\n  }\n}\n};\n\nconst itemsPerPage = 25; // Set the number of items per page\nconst maxPaginationLinks = 10; // Set the maximum number of pagination links\n\nconst updatePaginationLinks = (currentPage, totalRows) => {\nconsole.log('updatePaginationLinks - currentPage:', currentPage);\nconsole.log('updatePaginationLinks - totalRows:', totalRows);\n\nconst totalPageCount = Math.ceil(totalRows / itemsPerPage);\nconsole.log('updatePaginationLinks - totalPageCount:', totalPageCount);\n\n// Calculate middlePage and adjust it if it exceeds totalPageCount\nconst pageLinksToShow = Math.min(totalPageCount, maxPaginationLinks);\nconst middlePage = Math.floor(pageLinksToShow / 2);\nconsole.log('updatePaginationLinks - middlePage:', middlePage);\n\n// Calculate startPage and endPage considering middlePage and totalPageCount\nlet startPage = Math.max(1, currentPage - middlePage);\nlet endPage = Math.min(totalPageCount, currentPage + middlePage);\n\n// Adjust startPage and endPage to ensure they stay within bounds\nif (endPage - startPage + 1 > pageLinksToShow) {\n  if (currentPage <= middlePage) {\n    endPage = startPage + pageLinksToShow - 1;\n  } else if (totalPageCount - currentPage < middlePage) {\n    startPage = totalPageCount - pageLinksToShow + 1;\n  } else {\n    startPage = currentPage - Math.floor(pageLinksToShow / 2);\n    endPage = startPage + pageLinksToShow - 1;\n  }\n}\n\npaginationLinks.value = Array.from({ length: endPage - startPage + 1 }, (_, index) => startPage + index);\n\nconsole.log('updatePaginationLinks - paginationLinks:', paginationLinks.value);\n};\n\n// Function to determine pagination link classes\nconst pageLinkClasses = (pageLink) => {\nconst baseClasses = 'relative inline-flex items-center px-4 py-2 text-sm font-semibold ring-1 ring-inset ring-gray-300 focus:outline-offset-0';\nif (pageLink === currentPage) {\n  return `${baseClasses} bg-indigo-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600`;\n} else {\n  return `${baseClasses} text-gray-900 hover:bg-gray-50 focus:z-20 focus:outline-offset-0`;\n}\n};\n\nconst goToPage = async (page) => {\nif (page < 1 || page > paginationLinks.length) {\n  return; // Don't go out of bounds\n}\nfetchDataForPage(page);\n};\n\nonMounted(() => {});\n</script>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"the-need-for-a-duckdb-sql-query-editor","depth":2,"text":"The Need for a DuckDB SQL Query Editor"},{"id":"technology-stack","depth":2,"text":"Technology Stack","children":[{"id":"server","depth":3,"text":"Server"},{"id":"front-end","depth":3,"text":"Front End"}]},{"id":"key-features-of-goduck","depth":2,"text":"Key Features of Goduck"},{"id":"exploring-the-goduck-interface","depth":2,"text":"Exploring the Goduck Interface"},{"id":"getting-started-with-goduck","depth":2,"text":"Getting Started with Goduck"},{"id":"full-source-code","depth":2,"text":"Full Source code"}]}},"_type":"markdown","_id":"content:blogs:free-lightweight-online-duckdb-sql-query-editor-in-nuxtjs-and-tailwind-css.md","_source":"content","_file":"blogs/free-lightweight-online-duckdb-sql-query-editor-in-nuxtjs-and-tailwind-css.md","_extension":"md"},{"_path":"/blogs/lifetime-free-linux-box-from-oracle","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Host Zypress in Life-time free linux box from Oracle Cloud Infrastructure (OCI)","description":"Oracle Cloud Infrastructue (OCI) is giving life-time free linux server which is ideal to run Zypress directly in the host machine in Nginx or in a Docker container or run as systemd services using Zypress Go binary.","date":"2021-07-05T12:00:00.000Z","published":true,"industries":[],"coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1626571705/senthilsweb.com/blog/Oracle-Cloud-Infrastructure_ezediy.png","ogimage":"https://res.cloudinary.com/nathansweb/image/upload/v1626571705/senthilsweb.com/blog/Oracle-Cloud-Infrastructure_ezediy.png","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1623612257/profile/sk_profile_sq.png","type":"Blog","tags":["Blog","Cloud Infrastructure","IaaS","Zypress","Free","Open Source","Linux OS"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Oracle Cloud Infrastructue (OCI) is giving life-time free linux server which is ideal to run Zypress directly in the host machine in Nginx or in a Docker container or run as systemd services using Zypress Go binary."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Oracle Cloud Infrastructue (OCI) is giving life-time free linux server which is ideal to run Zypress directly in the host machine in Nginx or in a Docker container or run as systemd services using Zypress Go binary."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You need credit card for "},{"type":"element","tag":"a","props":{"href":"https://signup.cloud.oracle.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Oracle Cloud Free Tier Sign up"}]},{"type":"text","value":" however they don't charge unless you consume any of the paid services."}]},{"type":"element","tag":"h2","props":{"id":"the-free-linux-server-configuration"},"children":[{"type":"text","value":"The free linux server configuration"}]},{"type":"element","tag":"list","props":{":items":"oci-linux-configuration"},"children":[]},{"type":"element","tag":"h2","props":{"id":"references"},"children":[{"type":"text","value":"References"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://medium.com/geekculture/using-oracle-cloud-to-create-an-always-free-online-development-environment-af00e5bc2a05","rel":["nofollow"]},"children":[{"type":"text","value":"Using Oracle Cloud to create an “always free” Online Development Environment"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://signup.cloud.oracle.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Oracle Cloud Free Tier Sign up"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"the-free-linux-server-configuration","depth":2,"text":"The free linux server configuration"},{"id":"references","depth":2,"text":"References"}]}},"_type":"markdown","_id":"content:blogs:lifetime-free-linux-box-from-oracle.md","_source":"content","_file":"blogs/lifetime-free-linux-box-from-oracle.md","_extension":"md"},{"_path":"/blogs/lodash","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Lodash","description":"","body":{"type":"root","children":[],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:blogs:lodash.md","_source":"content","_file":"blogs/lodash.md","_extension":"md"},{"_path":"/blogs/running-a-binary-in-headless-mode","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Running a Binary in Headless Mode","description":"Running a binary in headless mode can be a useful technique when you need to run a binary on a remote server or in a terminal environment. By running the binary without a graphical user interface (GUI), you can save system resources and ensure that the binary runs smoothly. In this blog post, we'll explore how to run a binary in headless mode using the command line. We'll cover the steps involved in running the binary, verifying that it's running, and stopping it when necessary.","pageTitle":"Running a Binary in Headless Mode","date":"2023-09-24T12:00:00.000Z","published":true,"industries":[],"coverimage":"https://images.unsplash.com/photo-1637517741483-3f63299e9111?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3540&q=80","ogImage":"https://images.unsplash.com/photo-1637517741483-3f63299e9111?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3540&q=80","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["Binary","Headless","Terminal"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Running a binary in headless mode can be a useful technique when you need to run a binary on a remote server or in a terminal environment. By running the binary without a graphical user interface (GUI), you can save system resources and ensure that the binary runs smoothly. In this blog post, we'll explore how to run a binary in headless mode using the command line. We'll cover the steps involved in running the binary, verifying that it's running, and stopping it when necessary."}]},{"type":"element","tag":"h2","props":{"id":"prerequisites"},"children":[{"type":"text","value":"Prerequisites"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A binary file that you want to run."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A terminal environment."}]}]},{"type":"element","tag":"h2","props":{"id":"step-1-navigate-to-the-binary-directory"},"children":[{"type":"text","value":"Step 1: Navigate to the Binary Directory"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Navigate to the directory where the binary file is located using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"cd"}]},{"type":"text","value":" command. For example, if your binary file is located in the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"/usr/local/bin"}]},{"type":"text","value":" directory, you can navigate to it using the following command:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"cd /usr/local/bin\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"cd /usr/local/bin\n"}]}]},{"type":"element","tag":"h2","props":{"id":"step-2-run-the-binary-in-headless-mode"},"children":[{"type":"text","value":"Step 2: Run the Binary in Headless Mode"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To run the binary in headless mode, you can use the following command:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"nohup ./binary-name > output.log 2>&1 &\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nohup ./binary-name > output.log 2>&1 &\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This command does the following:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"nohup"}]},{"type":"text","value":": Runs the binary in the background and prevents it from being terminated when the terminal is closed."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"./binary-name"}]},{"type":"text","value":": Specifies the name of the binary file that you want to run."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"> output.log"}]},{"type":"text","value":": Redirects the output of the binary to a file named "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"output.log"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"2>&1"}]},{"type":"text","value":": Redirects the error output of the binary to the same file as the standard output."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"&"}]},{"type":"text","value":": Runs the command in the background."}]}]},{"type":"element","tag":"h2","props":{"id":"step-3-verify-the-binary-is-running"},"children":[{"type":"text","value":"Step 3: Verify the Binary is Running"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To verify that the binary is running, you can use the following command:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This command lists all running processes and filters the output to show only the processes that contain the name of the binary file. If the binary is running, you should see its process ID (PID) in the output."}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"ps aux | grep binary-name\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"ps aux | grep binary-name\n"}]}]},{"type":"element","tag":"h2","props":{"id":"step-4-stop-the-binary"},"children":[{"type":"text","value":"Step 4: Stop the Binary"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To stop the binary, you can use the following command:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"kill <pid>\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"kill <pid>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Replace "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<pid>"}]},{"type":"text","value":" with the PID of the binary process that you want to stop. You can obtain the PID using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"ps aux | grep binary-name"}]},{"type":"text","value":" command."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"prerequisites","depth":2,"text":"Prerequisites"},{"id":"step-1-navigate-to-the-binary-directory","depth":2,"text":"Step 1: Navigate to the Binary Directory"},{"id":"step-2-run-the-binary-in-headless-mode","depth":2,"text":"Step 2: Run the Binary in Headless Mode"},{"id":"step-3-verify-the-binary-is-running","depth":2,"text":"Step 3: Verify the Binary is Running"},{"id":"step-4-stop-the-binary","depth":2,"text":"Step 4: Stop the Binary"}]}},"_type":"markdown","_id":"content:blogs:running-a-binary-in-headless-mode.md","_source":"content","_file":"blogs/running-a-binary-in-headless-mode.md","_extension":"md"},{"_path":"/blogs/seamlessly-deploying-erpnexts-healthcare-module-on-docker","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Seamlessly Deploying ERPNext's Healthcare Module named Frappe Health on Docker","description":"A walkthrough of deploying the Healthcare module of ERPNext using Docker-Compose, shedding light on some challenges and their solutions.","slug":"deploying-erpnext-healthcare-module-on-docker","date":"2023-10-22T14:00:00.000Z","published":true,"industries":["Technology","Development","ERP","Healthcare"],"coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1697889426/senthilsweb.com/blog/frappe-health_ruiadz.png","ogImage":"https://res.cloudinary.com/nathansweb/image/upload/v1697889426/senthilsweb.com/blog/frappe-health_ruiadz.png","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["ERPNext","Docker","Healthcare","Open Source"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ERPNext stands as a testament to the power of open-source solutions. Particularly captivating is its Healthcare module, which, interestingly, isn't immediately activated in the out-of-the-box setup. For my part, I utilized the docker-compose method for my ERPNext installation."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Navigating to the core of ERPNext's Healthcare feature, I discovered that it thrives under community management. It has its dedicated website at "},{"type":"element","tag":"a","props":{"href":"https://frappehealth.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Frappe Health"}]},{"type":"text","value":". However, a minor hiccup arose when I tried accessing the documentation through their main site – a 404 error. Such instances, while seemingly trivial, can be stumbling blocks for users. I remain hopeful that the diligent ERPNext team will address this shortly."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"On my quest for a clear installation procedure for the Healthcare module, I drew a blank from the conventional online documentation. However, persistence paid off when I chanced upon the necessary details in their GitHub repository at "},{"type":"element","tag":"a","props":{"href":"https://github.com/frappe/health","rel":["nofollow"]},"children":[{"type":"text","value":"Frappe Health GitHub"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Transitioning to a docker-based setup presented its own set of challenges, primarily revolving around pinpointing the location of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"bench"}]},{"type":"text","value":" CLI. Through a combination of deduction and experience, I discerned that it resides within the service labeled \"backend\"."}]},{"type":"element","tag":"h2","props":{"id":"noteworthy-observations"},"children":[{"type":"text","value":"Noteworthy Observations"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The docker-compose file I used was curiously named \"pwd.yml\", and the rationale behind this naming remains elusive."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Essential to the setup process is the restart of specific services post-installation. Surprisingly, there's no direct mention of this step or a list of the requisite services in the official documentation."}]}]},{"type":"element","tag":"h2","props":{"id":"installation-process"},"children":[{"type":"text","value":"Installation Process"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"SSH into the backend service and execute the commands:"},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"bench get-app healthcare\nbench --site demo.com install-app healthcare\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"bench get-app healthcare\nbench --site demo.com install-app healthcare\n"}]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"Replace "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"demo.com"}]},{"type":"text","value":" with "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"frontend"}]},{"type":"text","value":", the default site name if you're using docker-compose in its standard configuration."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Restart services in the following order:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Backend:\n"},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker stop [your back-end-container-id]\ndocker start [your back-end-container-id]\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker stop [your back-end-container-id]\ndocker start [your back-end-container-id]\n"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Database:\n"},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker stop [your db-container-id]\ndocker start [your db-container-id]\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker stop [your db-container-id]\ndocker start [your db-container-id]\n"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Frontend:\n"},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"docker stop [your frontend-container-id]\ndocker start [your frontend-container-id]\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker stop [your frontend-container-id]\ndocker start [your frontend-container-id]\n"}]}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"conclusion"},"children":[{"type":"text","value":"Conclusion"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ERPNext is a remarkable platform, and all accolades to the developers who have generously offered it as a wholly open-source tool. There's always room for refining and enhancing the user experience, and I believe that the community will continue to rally in support. Here's hoping my insights aid others on similar journeys, and I'm elated to make this modest contribution back to the ERPNext community."}]},{"type":"element","tag":"hr","props":{"id":""},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"noteworthy-observations","depth":2,"text":"Noteworthy Observations"},{"id":"installation-process","depth":2,"text":"Installation Process"},{"id":"conclusion","depth":2,"text":"Conclusion"}]}},"_type":"markdown","_id":"content:blogs:seamlessly-deploying-erpnexts-healthcare-module-on-docker.md","_source":"content","_file":"blogs/seamlessly-deploying-erpnexts-healthcare-module-on-docker.md","_extension":"md"},{"_path":"/blogs/smoothing-erpnext-deployment-on-apples-m1-via-docker-compose","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Smoothing ERPNext Deployment on Apple's M1 via Docker-Compose","description":"Addressing the overlooked detail in ERPNext's Docker setup for the Apple M1 architecture and providing a simple solution.","pageTitle":"Tackling Docker-Compose Challenges with ERPNext on Apple M1","date":"2023-10-22T08:30:00.000Z","published":true,"industries":["Technology","Development","Docker","ERP"],"coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1697886847/senthilsweb.com/blog/docker-applem1_nawx2w.webp","ogImage":"https://res.cloudinary.com/nathansweb/image/upload/v1697886847/senthilsweb.com/blog/docker-applem1_nawx2w.webp","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["Docker","Apple M1","ERPNext","Docker-Compose"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The ARM-based Apple M1 chip has revolutionized Mac's performance capabilities. Yet, when diving into Docker-based setups, particularly with applications like ERPNext, I encountered a compatibility hiccup. This post unveils that journey and the quick fix I discovered."}]},{"type":"element","tag":"h2","props":{"id":"problem-statement"},"children":[{"type":"text","value":"Problem Statement"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The goal was simple: Install ERPNext using Docker-Compose on my Apple M1 Macbook Pro. However, this seemingly straightforward task became challenging due to the absence of specific instructions in the ERPNext documentation about M1 compatibility."}]},{"type":"element","tag":"h2","props":{"id":"discovering-the-solution"},"children":[{"type":"text","value":"Discovering the Solution"}]},{"type":"element","tag":"h3","props":{"id":"_1-uncovering-the-compatibility-issue"},"children":[{"type":"text","value":"1. Uncovering the Compatibility Issue"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"During the initial ERPNext installation, I faced issues arising from the architectural differences between the M1 and traditional x86_64 systems."}]},{"type":"element","tag":"h3","props":{"id":"_2-the-quick-fix"},"children":[{"type":"text","value":"2. The Quick Fix"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Identifying the root of the problem, I realized the solution was quite simple. By adding "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"platform: linux/amd64"}]},{"type":"text","value":" to every service in the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":" file, the compatibility issues were resolved. This tweak ensured the containers would be spun up using the desired architecture, making the software run as intended."}]},{"type":"element","tag":"h3","props":{"id":"updated-docker-composeyml"},"children":[{"type":"text","value":"Updated docker-compose.yml"}]},{"type":"element","tag":"pre","props":{"className":["language-yaml"],"code":"version: \"3\"\n\nservices:\n  backend:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  configurator:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: none\n    entrypoint:\n      - bash\n      - -c\n    command:\n      - >\n        ls -1 apps > sites/apps.txt;\n        bench set-config -g db_host $$DB_HOST;\n        bench set-config -gp db_port $$DB_PORT;\n        bench set-config -g redis_cache \"redis://$$REDIS_CACHE\";\n        bench set-config -g redis_queue \"redis://$$REDIS_QUEUE\";\n        bench set-config -g redis_socketio \"redis://$$REDIS_SOCKETIO\";\n        bench set-config -gp socketio_port $$SOCKETIO_PORT;\n    environment:\n      DB_HOST: db\n      DB_PORT: \"3306\"\n      REDIS_CACHE: redis-cache:6379\n      REDIS_QUEUE: redis-queue:6379\n      REDIS_SOCKETIO: redis-socketio:6379\n      SOCKETIO_PORT: \"9000\"\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  create-site:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: none\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n    entrypoint:\n      - bash\n      - -c\n    command:\n      - >\n        wait-for-it -t 120 db:3306;\n        wait-for-it -t 120 redis-cache:6379;\n        wait-for-it -t 120 redis-queue:6379;\n        wait-for-it -t 120 redis-socketio:6379;\n        export start=`date +%s`;\n        until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r \".db_host // empty\"` ]] && \\\n          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r \".redis_cache // empty\"` ]] && \\\n          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r \".redis_queue // empty\"` ]];\n        do\n          echo \"Waiting for sites/common_site_config.json to be created\";\n          sleep 5;\n          if (( `date +%s`-start > 120 )); then\n            echo \"could not find sites/common_site_config.json with required keys\";\n            exit 1\n          fi\n        done;\n        echo \"sites/common_site_config.json found\";\n        bench new-site frontend --no-mariadb-socket --admin-password=admin --db-root-password=admin --install-app erpnext --set-default;\n\n  db:\n    image: mariadb:10.6\n    healthcheck:\n      test: mysqladmin ping -h localhost --password=admin\n      interval: 1s\n      retries: 15\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - --character-set-server=utf8mb4\n      - --collation-server=utf8mb4_unicode_ci\n      - --skip-character-set-client-handshake\n      - --skip-innodb-read-only-compressed # Temporary fix for MariaDB 10.6\n    environment:\n      MYSQL_ROOT_PASSWORD: admin\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db-data:/var/lib/mysql\n\n  frontend:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - nginx-entrypoint.sh\n    environment:\n      BACKEND: backend:8000\n      FRAPPE_SITE_NAME_HEADER: frontend\n      SOCKETIO: websocket:9000\n      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1\n      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For\n      UPSTREAM_REAL_IP_RECURSIVE: \"off\"\n      PROXY_READ_TIMEOUT: 120\n      CLIENT_MAX_BODY_SIZE: 50m\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n    ports:\n      - \"8080:8080\"\n\n  queue-default:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - bench\n      - worker\n      - --queue\n      - default\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  queue-long:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - bench\n      - worker\n      - --queue\n      - long\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  queue-short:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - bench\n      - worker\n      - --queue\n      - short\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  redis-queue:\n    image: redis:6.2-alpine\n    deploy:\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - redis-queue-data:/data\n\n  redis-cache:\n    image: redis:6.2-alpine\n    deploy:\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - redis-cache-data:/data\n\n  redis-socketio:\n    image: redis:6.2-alpine\n    deploy:\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - redis-socketio-data:/data\n\n  scheduler:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - bench\n      - schedule\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  websocket:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - node\n      - /home/frappe/frappe-bench/apps/frappe/socketio.js\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\nvolumes:\n  db-data:\n  redis-queue-data:\n  redis-cache-data:\n  redis-socketio-data:\n  sites:\n  logs:\n","language":"yaml","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"version: \"3\"\n\nservices:\n  backend:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  configurator:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: none\n    entrypoint:\n      - bash\n      - -c\n    command:\n      - >\n        ls -1 apps > sites/apps.txt;\n        bench set-config -g db_host $$DB_HOST;\n        bench set-config -gp db_port $$DB_PORT;\n        bench set-config -g redis_cache \"redis://$$REDIS_CACHE\";\n        bench set-config -g redis_queue \"redis://$$REDIS_QUEUE\";\n        bench set-config -g redis_socketio \"redis://$$REDIS_SOCKETIO\";\n        bench set-config -gp socketio_port $$SOCKETIO_PORT;\n    environment:\n      DB_HOST: db\n      DB_PORT: \"3306\"\n      REDIS_CACHE: redis-cache:6379\n      REDIS_QUEUE: redis-queue:6379\n      REDIS_SOCKETIO: redis-socketio:6379\n      SOCKETIO_PORT: \"9000\"\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  create-site:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: none\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n    entrypoint:\n      - bash\n      - -c\n    command:\n      - >\n        wait-for-it -t 120 db:3306;\n        wait-for-it -t 120 redis-cache:6379;\n        wait-for-it -t 120 redis-queue:6379;\n        wait-for-it -t 120 redis-socketio:6379;\n        export start=`date +%s`;\n        until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r \".db_host // empty\"` ]] && \\\n          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r \".redis_cache // empty\"` ]] && \\\n          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r \".redis_queue // empty\"` ]];\n        do\n          echo \"Waiting for sites/common_site_config.json to be created\";\n          sleep 5;\n          if (( `date +%s`-start > 120 )); then\n            echo \"could not find sites/common_site_config.json with required keys\";\n            exit 1\n          fi\n        done;\n        echo \"sites/common_site_config.json found\";\n        bench new-site frontend --no-mariadb-socket --admin-password=admin --db-root-password=admin --install-app erpnext --set-default;\n\n  db:\n    image: mariadb:10.6\n    healthcheck:\n      test: mysqladmin ping -h localhost --password=admin\n      interval: 1s\n      retries: 15\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - --character-set-server=utf8mb4\n      - --collation-server=utf8mb4_unicode_ci\n      - --skip-character-set-client-handshake\n      - --skip-innodb-read-only-compressed # Temporary fix for MariaDB 10.6\n    environment:\n      MYSQL_ROOT_PASSWORD: admin\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db-data:/var/lib/mysql\n\n  frontend:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - nginx-entrypoint.sh\n    environment:\n      BACKEND: backend:8000\n      FRAPPE_SITE_NAME_HEADER: frontend\n      SOCKETIO: websocket:9000\n      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1\n      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For\n      UPSTREAM_REAL_IP_RECURSIVE: \"off\"\n      PROXY_READ_TIMEOUT: 120\n      CLIENT_MAX_BODY_SIZE: 50m\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n    ports:\n      - \"8080:8080\"\n\n  queue-default:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - bench\n      - worker\n      - --queue\n      - default\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  queue-long:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - bench\n      - worker\n      - --queue\n      - long\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  queue-short:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - bench\n      - worker\n      - --queue\n      - short\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  redis-queue:\n    image: redis:6.2-alpine\n    deploy:\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - redis-queue-data:/data\n\n  redis-cache:\n    image: redis:6.2-alpine\n    deploy:\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - redis-cache-data:/data\n\n  redis-socketio:\n    image: redis:6.2-alpine\n    deploy:\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - redis-socketio-data:/data\n\n  scheduler:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - bench\n      - schedule\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\n  websocket:\n    image: frappe/erpnext:v14.44.0\n    platform: linux/amd64\n    deploy:\n      restart_policy:\n        condition: on-failure\n    command:\n      - node\n      - /home/frappe/frappe-bench/apps/frappe/socketio.js\n    volumes:\n      - sites:/home/frappe/frappe-bench/sites\n      - logs:/home/frappe/frappe-bench/logs\n\nvolumes:\n  db-data:\n  redis-queue-data:\n  redis-cache-data:\n  redis-socketio-data:\n  sites:\n  logs:\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"problem-statement","depth":2,"text":"Problem Statement"},{"id":"discovering-the-solution","depth":2,"text":"Discovering the Solution","children":[{"id":"_1-uncovering-the-compatibility-issue","depth":3,"text":"1. Uncovering the Compatibility Issue"},{"id":"_2-the-quick-fix","depth":3,"text":"2. The Quick Fix"},{"id":"updated-docker-composeyml","depth":3,"text":"Updated docker-compose.yml"}]}]}},"_type":"markdown","_id":"content:blogs:smoothing-erpnext-deployment-on-apples-m1-via-docker-compose.md","_source":"content","_file":"blogs/smoothing-erpnext-deployment-on-apples-m1-via-docker-compose.md","_extension":"md"},{"_path":"/blogs/using-makefiles-to-bundle-a-full-stack-app-into-a-go-binary","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Templrjs Demo","description":"Creating a seamless deployment process can be a challenge when building full-stack applications. This blog will walk you through packaging a web frontend and a Go backend into a single binary, making deployment easier and more efficient.","pageTitle":"Templrjs Demo","date":"2023-09-30T12:00:00.000Z","published":true,"industries":[],"coverimage":"https://images.unsplash.com/photo-1643140751093-ce43a9170fe8?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3436&q=80","ogImage":"https://images.unsplash.com/photo-1643140751093-ce43a9170fe8?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3436&q=80","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Blog","tags":["Go","Web Development","Deployment"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In modern software development, it's not uncommon for projects to involve both a backend API, often written in languages like Go, and a frontend web application, typically using frameworks like Vue.js or React. While each part can be developed and tested independently, deploying them together in a seamless manner can be a challenge. In this post, we'll delve into how to package a web frontend and a Go backend into a single binary, simplifying the deployment process."}]},{"type":"element","tag":"h2","props":{"id":"a-brief-overview-of-our-templrjs-project"},"children":[{"type":"text","value":"A Brief Overview of Our TemplrJS Project"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Our project, "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"TemplrJS"}]},{"type":"text","value":", is a rapid web application development framework. It's built using the Vue.js framework on the frontend and Go on the backend, targeting the edge computing paradigm. The entire application, including its frontend assets, is packaged inside a single binary. This binary not only serves the backend logic but also delivers the frontend assets to the browser. Moreover, we've integrated DuckDB to provide embedded database functionality."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Key Features:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Single Binary Deployment:"}]},{"type":"text","value":" No need to manage separate servers for frontend and backend. Just deploy the binary and you're good to go!"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Embedded Database with DuckDB:"}]},{"type":"text","value":" If no database configuration is provided, "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"TemplrJS"}]},{"type":"text","value":" defaults to an in-memory database. If a database filename is specified and exists, the system will use it; otherwise, a new file will be created."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Optimized Web Application:"}]},{"type":"text","value":" The default web application is client-only, meaning no server-side rendering (SSR). Designed with a mobile-first approach, all pages are optimized for both mobile and web viewing."}]}]},{"type":"element","tag":"h2","props":{"id":"manual-packaging"},"children":[{"type":"text","value":"Manual Packaging"}]},{"type":"element","tag":"h3","props":{"id":"step-1-setting-up-the-frontend"},"children":[{"type":"text","value":"Step 1: Setting Up the Frontend"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Navigate to the web project directory:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"cd ./web\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"cd ./web\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Before generating the build, clean up any previous build artifacts:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"rm -rf ./dist\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"rm -rf ./dist\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Then, install the necessary npm packages:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"npm i\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And generate the build:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"npm run generate\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm run generate\n"}]}]},{"type":"element","tag":"h3","props":{"id":"step-2-embedding-the-frontend-with-the-go-backend"},"children":[{"type":"text","value":"Step 2: Embedding the Frontend with the Go Backend"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once the web frontend is built, we'll move its assets to the Go project's root directory:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"cp -r ./web/dist ./dist\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"cp -r ./web/dist ./dist\n"}]}]},{"type":"element","tag":"h3","props":{"id":"step-3-building-the-go-binary"},"children":[{"type":"text","value":"Step 3: Building the Go Binary"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With the frontend assets in place, we can now build our Go binary:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"go build -o templrjs_server -v .\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"go build -o templrjs_server -v .\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This command compiles the Go code, embedding the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"dist"}]},{"type":"text","value":" folder, resulting in a single binary named "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"templrjs_server"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"step-4-packaging-for-deployment"},"children":[{"type":"text","value":"Step 4: Packaging for Deployment"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lastly, we'll package essential files into a ZIP for easy deployment:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"ZIP_NAME=\"templrjs_bundle_`date +%s`.zip\"\nzip $$ZIP_NAME templrjs_server templrjs.duckdb templrjs.duckdb.wal config.yml .env.sample\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"ZIP_NAME=\"templrjs_bundle_`date +%s`.zip\"\nzip $$ZIP_NAME templrjs_server templrjs.duckdb templrjs.duckdb.wal config.yml .env.sample\n"}]}]},{"type":"element","tag":"h2","props":{"id":"packaging-with-makefile"},"children":[{"type":"text","value":"Packaging with Makefile"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To package everything into a single binary, we use a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Makefile"}]},{"type":"text","value":". This allows us to automate the entire build process with a single command. Let's break down the steps:"}]},{"type":"element","tag":"pre","props":{"className":["language-makefile"],"code":"# Variables\nWEB_DIR=./web\nDIST_DIR=./dist\nOS=$(shell uname)\n\n# Phony targets ensure that Make doesn't look for files named like the target\n.PHONY: clean generate copy build package\n\nall: clean generate copy build package\n\nclean:\n    @echo \"Deleting previous web build artifacts...\"\n    @rm -rf $(WEB_DIR)/dist\n    @echo \"Deleted...\"\n\ngenerate:\n    @echo \"Installing web dependencies...\"\n    @cd $(WEB_DIR) && npm i\n    @echo \"Dependencies installed...\"\n    @echo \"Generating build...\"\n    @cd $(WEB_DIR) && npm run generate || (echo \"Error generating build. Exiting...\" && exit 1)\n    @echo \"Generated...\"\n\ncopy:\n    @echo \"Copying to root $(DIST_DIR) for embedding...\"\n    @rm -rf $(DIST_DIR)\n    @cp -r $(WEB_DIR)/dist $(DIST_DIR)\n    @echo \"Copied...\"\n\nbuild:\n    @echo \"Building Go binary for $(OS)...\"\nifeq ($(OS),Linux)\n    @go build -o templrjs_server-linux-aarch64 -v .\nelse ifeq ($(OS),Darwin)\n    @go build -o templrjs_server-macos -v .\nelse\n    @echo \"Unsupported OS: $(OS). Exiting...\"\n    @exit 1\nendif\n    @echo \"Binary built...\"\n\npackage:\n    @echo \"Packaging files...\"\n    @ZIP_NAME=\"templrjs_bundle_`date +%s`.zip\"; \\\n    zip $$ZIP_NAME templrjs_server-* templrjs.duckdb templrjs.duckdb.wal config.yml docker-compose.yml rules.yml .env.sample\n    @echo \"Packaged into $$ZIP_NAME...\"\n","language":"makefile","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# Variables\nWEB_DIR=./web\nDIST_DIR=./dist\nOS=$(shell uname)\n\n# Phony targets ensure that Make doesn't look for files named like the target\n.PHONY: clean generate copy build package\n\nall: clean generate copy build package\n\nclean:\n    @echo \"Deleting previous web build artifacts...\"\n    @rm -rf $(WEB_DIR)/dist\n    @echo \"Deleted...\"\n\ngenerate:\n    @echo \"Installing web dependencies...\"\n    @cd $(WEB_DIR) && npm i\n    @echo \"Dependencies installed...\"\n    @echo \"Generating build...\"\n    @cd $(WEB_DIR) && npm run generate || (echo \"Error generating build. Exiting...\" && exit 1)\n    @echo \"Generated...\"\n\ncopy:\n    @echo \"Copying to root $(DIST_DIR) for embedding...\"\n    @rm -rf $(DIST_DIR)\n    @cp -r $(WEB_DIR)/dist $(DIST_DIR)\n    @echo \"Copied...\"\n\nbuild:\n    @echo \"Building Go binary for $(OS)...\"\nifeq ($(OS),Linux)\n    @go build -o templrjs_server-linux-aarch64 -v .\nelse ifeq ($(OS),Darwin)\n    @go build -o templrjs_server-macos -v .\nelse\n    @echo \"Unsupported OS: $(OS). Exiting...\"\n    @exit 1\nendif\n    @echo \"Binary built...\"\n\npackage:\n    @echo \"Packaging files...\"\n    @ZIP_NAME=\"templrjs_bundle_`date +%s`.zip\"; \\\n    zip $$ZIP_NAME templrjs_server-* templrjs.duckdb templrjs.duckdb.wal config.yml docker-compose.yml rules.yml .env.sample\n    @echo \"Packaged into $$ZIP_NAME...\"\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To execute the entire sequence, just run:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"$ make\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ make\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Makefile"}]},{"type":"text","value":" breaks down the operations into individual tasks. You can also execute them individually if needed, like:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"$ make clean-web-dist\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ make clean-web-dist\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"or"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"$ make generate-web\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ make generate-web\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"and so on."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: Before running this, ensure that you have "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"zip"}]},{"type":"text","value":" installed, as the packaging task uses it. If you're on a system like Ubuntu, you can install it using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"sudo apt-get install zip"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"conclusion"},"children":[{"type":"text","value":"Conclusion"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Packaging a full-stack application into a single binary simplifies deployment, reduces potential points of failure, and streamlines the development process. With the combination of a powerful frontend framework and Go's efficiency and performance, you can create robust and easily deployable web applications."}]},{"type":"element","tag":"hr","props":{"id":""},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"a-brief-overview-of-our-templrjs-project","depth":2,"text":"A Brief Overview of Our TemplrJS Project"},{"id":"manual-packaging","depth":2,"text":"Manual Packaging","children":[{"id":"step-1-setting-up-the-frontend","depth":3,"text":"Step 1: Setting Up the Frontend"},{"id":"step-2-embedding-the-frontend-with-the-go-backend","depth":3,"text":"Step 2: Embedding the Frontend with the Go Backend"},{"id":"step-3-building-the-go-binary","depth":3,"text":"Step 3: Building the Go Binary"},{"id":"step-4-packaging-for-deployment","depth":3,"text":"Step 4: Packaging for Deployment"}]},{"id":"packaging-with-makefile","depth":2,"text":"Packaging with Makefile"},{"id":"conclusion","depth":2,"text":"Conclusion"}]}},"_type":"markdown","_id":"content:blogs:using-makefiles-to-bundle-a-full-stack-app-into-a-go-binary.md","_source":"content","_file":"blogs/using-makefiles-to-bundle-a-full-stack-app-into-a-go-binary.md","_extension":"md"},{"_path":"/blogs/zypress","_dir":"blogs","_draft":false,"_partial":false,"_locale":"","title":"Zypress, Open-source Jamstack framework created using NuxtJS (Vue.js) + Tailwindcss","description":"Zypress is a Vue.js based Jamstack framework created using NuxtJS + Tailwindcss + @nuxt/content to rapidly build modern websites anything you can imagine. It comes preloaded with a personal website and documentaion stater-kit to power blog and documentation websites.","date":"2021-07-04T12:00:00.000Z","status":"published","industries":[],"coverimage":"https://images.unsplash.com/photo-1627398242454-45a1465c2479?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3474&q=80","ogimage":"https://images.unsplash.com/photo-1627398242454-45a1465c2479?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3474&q=80","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1623612257/profile/sk_profile_sq.png","type":"Blog","tags":["Blog","Article","Technology","Static Website","SPA","Single Page Webapplication","JAM Stack"],"excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Zypress is a Vue.js based Jamstack framework created using NuxtJS + Tailwindcss + @nuxt/content to rapidly build modern websites anything you can imagine. It comes preloaded with a personal website and documentaion stater-kit to power blog and documentation websites."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Zypress is a Vue.js based Jamstack framework created using NuxtJS + Tailwindcss + @nuxt/content to rapidly build modern websites anything you can imagine. It comes preloaded with a personal website and documentaion stater-kit to power blog and documentation websites."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I got introduced to Vue.JS then to tailwindcss and Nuxt.js and immediately fell in love with the Nuxt (Vue.js) Power, Flexiblity and Easy to learn nature of the framework. Adding Tailwindcss (tailwind.UI) to Nuxt elevated the overall design, development and user experience and I decided to start building a generic high level web development framework with the following design goals and the result is zypress (inspired by the name Vuepress) which I open-sourced to the community today, 4th July 2021 and committed to work on this personal project during my weekends and free time."}]},{"type":"element","tag":"h2","props":{"id":"requirements-and-design-goals"},"children":[{"type":"text","value":"Requirements and Design Goals"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The primary requirement I built "},{"type":"element","tag":"badge","props":{},"children":[{"type":"text","value":"Zypress"}]},{"type":"text","value":" is to power my personal website and blog."}]},{"type":"element","tag":"h3","props":{"id":"design-goals"},"children":[{"type":"text","value":"Design Goals"}]},{"type":"element","tag":"list","props":{":items":"design-goals"},"children":[]},{"type":"element","tag":"h2","props":{"id":"getting-started"},"children":[{"type":"text","value":"Getting started"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Follow the "},{"type":"element","tag":"a","props":{"href":"/docs"},"children":[{"type":"text","value":"documentaion"}]},{"type":"text","value":" to learn how to get zypress setup and deploy"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"requirements-and-design-goals","depth":2,"text":"Requirements and Design Goals","children":[{"id":"design-goals","depth":3,"text":"Design Goals"}]},{"id":"getting-started","depth":2,"text":"Getting started"}]}},"_type":"markdown","_id":"content:blogs:zypress.md","_source":"content","_file":"blogs/zypress.md","_extension":"md"},{"_path":"/docs/duckdbsql","_dir":"docs","_draft":false,"_partial":false,"_locale":"","title":"SQL","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"sql"},"children":[{"type":"text","value":"SQL"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"CREATE TABLE IF NOT EXISTS id_sequence (entity_name VARCHAR, next_id INTEGER);\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"CREATE TABLE IF NOT EXISTS id_sequence (entity_name VARCHAR, next_id INTEGER);\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"CREATE TABLE IF NOT EXISTS blogs (\n    id INT PRIMARY KEY,\n    created_at TIMESTAMP DEFAULT current_timestamp,\n    modified_at TIMESTAMP DEFAULT current_timestamp,\n    update_count INT DEFAULT 0,\n    title VARCHAR,\n    content TEXT\n);\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"CREATE TABLE IF NOT EXISTS blogs (\n    id INT PRIMARY KEY,\n    created_at TIMESTAMP DEFAULT current_timestamp,\n    modified_at TIMESTAMP DEFAULT current_timestamp,\n    update_count INT DEFAULT 0,\n    title VARCHAR,\n    content TEXT\n);\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:docs:duckdbsql.md","_source":"content","_file":"docs/duckdbsql.md","_extension":"md"},{"_path":"/docs/getting-started-with-duckdb-sql-ide","_dir":"docs","_draft":false,"_partial":false,"_locale":"","title":"Getting Started with DuckDB SQL IDE","description":"The \"Tickit\" database typically contains tables related to a fictional ticket-selling company, including data about events, venues, ticket sales, and customer information. It's designed to showcase various SQL operations and query scenarios.","pageTitle":"Tickit Database SQL Queries","date":"2023-09-15T12:00:00.000Z","published":true,"industries":[],"coverimage":"https://res.cloudinary.com/nathansweb/image/upload/v1693595703/senthilsweb.com/blog/senthilsweb-image-card_4_thm4gh.png","ogImage":"https://res.cloudinary.com/nathansweb/image/upload/v1693592651/senthilsweb.com/blog/goduck.png","author":"Senthilnathan Karuppaiah","avatar":"https://res.cloudinary.com/nathansweb/image/upload/v1626488903/profile/Senthil-profile-picture-01_al07i5.jpg","type":"Documentation","tags":["DuckDB","SQL"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"em","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Tickit"}]}]},{"type":"text","value":" database typically contains tables related to a fictional ticket-selling company, including data about events, venues, ticket sales, and customer information. It's designed to showcase various SQL operations and query scenarios."}]},{"type":"element","tag":"hr","props":{"id":""},"children":[]},{"type":"element","tag":"h2","props":{"id":"blog-tables-setup"},"children":[{"type":"text","value":"Blog Tables Setup"}]},{"type":"element","tag":"h3","props":{"id":"create-the-id_sequence-table"},"children":[{"type":"text","value":"Create the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"id_sequence"}]},{"type":"text","value":" table"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"\n```sql\nCREATE TABLE IF NOT EXISTS id_sequence (entity_name VARCHAR, next_id INTEGER);\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n```sql\nCREATE TABLE IF NOT EXISTS id_sequence (entity_name VARCHAR, next_id INTEGER);\n"}]}]},{"type":"element","tag":"h3","props":{"id":"create-the-blogs-table"},"children":[{"type":"text","value":"Create the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"blogs"}]},{"type":"text","value":" table"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"CREATE TABLE IF NOT EXISTS blogs (\n    id INT PRIMARY KEY,\n    created_at TIMESTAMP DEFAULT current_timestamp,\n    modified_at TIMESTAMP DEFAULT current_timestamp,\n    update_count INT DEFAULT 0,\n    title VARCHAR,\n    content TEXT\n);\n\n## Duckdb Practice SQL Queries from tickitdb\n\n### Most Popular States\n\n```sql\nSELECT venuestate, count(venueid) as total\nFROM venues \nGROUP BY venuestate\nORDER BY total desc, venuestate limit 5\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"CREATE TABLE IF NOT EXISTS blogs (\n    id INT PRIMARY KEY,\n    created_at TIMESTAMP DEFAULT current_timestamp,\n    modified_at TIMESTAMP DEFAULT current_timestamp,\n    update_count INT DEFAULT 0,\n    title VARCHAR,\n    content TEXT\n);\n\n## Duckdb Practice SQL Queries from tickitdb\n\n### Most Popular States\n\n```sql\nSELECT venuestate, count(venueid) as total\nFROM venues \nGROUP BY venuestate\nORDER BY total desc, venuestate limit 5\n"}]}]},{"type":"element","tag":"h3","props":{"id":"least-popular-events"},"children":[{"type":"text","value":"Least Popular Events"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"SELECT events.eventname, categories.catname, sum(sales.qtysold) as total_tickets\nFROM events,sales,categories\nwhere events.eventid=sales.eventid and events.catid=categories.catid\nGROUP BY events.eventname, categories.catname\nORDER BY total_tickets desc\nLIMIT 10\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"SELECT events.eventname, categories.catname, sum(sales.qtysold) as total_tickets\nFROM events,sales,categories\nwhere events.eventid=sales.eventid and events.catid=categories.catid\nGROUP BY events.eventname, categories.catname\nORDER BY total_tickets desc\nLIMIT 10\n"}]}]},{"type":"element","tag":"h3","props":{"id":"inventory-aging"},"children":[{"type":"text","value":"Inventory Aging"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"SELECT venues.venuename, categories.catname, events.eventname,listings.listtime, (sales.saletime- listings.listtime) as sale_age\nFROM sales,listings, venues,events,categories\nWHERE \nevents.eventid=sales.eventid \nand \nevents.catid=categories.catid\nand sales.listid=listings.listid\nand venues.venueid=events.venueid\nORDER BY sale_age desc, sales.saletime desc,  listings.listtime desc, venues.venuename,  categories.catname,  events.eventname\nLIMIT 20\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"SELECT venues.venuename, categories.catname, events.eventname,listings.listtime, (sales.saletime- listings.listtime) as sale_age\nFROM sales,listings, venues,events,categories\nWHERE \nevents.eventid=sales.eventid \nand \nevents.catid=categories.catid\nand sales.listid=listings.listid\nand venues.venueid=events.venueid\nORDER BY sale_age desc, sales.saletime desc,  listings.listtime desc, venues.venuename,  categories.catname,  events.eventname\nLIMIT 20\n"}]}]},{"type":"element","tag":"h3","props":{"id":"event_location_and_time"},"children":[{"type":"text","value":"event_location_and_time"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"SELECT  events.eventname, events.starttime, venues.venuename\nFROM events, venues \nwhere events.venueid=venues.venueid \norder by events.eventname asc\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"SELECT  events.eventname, events.starttime, venues.venuename\nFROM events, venues \nwhere events.venueid=venues.venueid \norder by events.eventname asc\n"}]}]},{"type":"element","tag":"h3","props":{"id":"people_sold_tickets_to_events"},"children":[{"type":"text","value":"people_sold_tickets_to_events"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"SELECT  events.eventname, users.email as seller\nFROM events, users, sales\nwhere\nsales.eventid=events.eventid\nand\nusers.userid=sales.sellerid\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"SELECT  events.eventname, users.email as seller\nFROM events, users, sales\nwhere\nsales.eventid=events.eventid\nand\nusers.userid=sales.sellerid\n"}]}]},{"type":"element","tag":"h3","props":{"id":"big_spenders"},"children":[{"type":"text","value":"big_spenders"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"SELECT users.firstname, sum(pricepaid) as total_spent\nFROM users, sales\nWHERE users.userid=sales.buyerid\nGROUP BY users.firstname\nORDER BY total_spent desc\nLIMIT 100\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"SELECT users.firstname, sum(pricepaid) as total_spent\nFROM users, sales\nWHERE users.userid=sales.buyerid\nGROUP BY users.firstname\nORDER BY total_spent desc\nLIMIT 100\n"}]}]},{"type":"element","tag":"h3","props":{"id":"sellers-who-made-more-than-1-sale-in-a-holiday"},"children":[{"type":"text","value":"sellers who made more than 1 sale in a holiday"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"select d.caldate, u.firstname, u.lastname, count(*) as sale_count from dates d\n inner join sales s on s.dateid  = d.dateid\n inner join users u on u.userid = s.sellerid\nwhere d.holiday = true\ngroup by 1,2,3having count(*)>1\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"select d.caldate, u.firstname, u.lastname, count(*) as sale_count from dates d\n inner join sales s on s.dateid  = d.dateid\n inner join users u on u.userid = s.sellerid\nwhere d.holiday = true\ngroup by 1,2,3having count(*)>1\n"}]}]},{"type":"element","tag":"h3","props":{"id":"top-10-sellers-made-most-on-holidays-or-weekends-in-2008"},"children":[{"type":"text","value":"top 10 sellers made most on holidays or weekends in 2008"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"select u.firstname, u.lastname, sum(s.commission) as holiday_weekend_commission\n from dates d\n inner join sales s on s.dateid  = d.dateid \n inner join users u on s.sellerid = u.userid\n where (d.holiday = true or d.day in ('SU','SA')) and d.YEAR = 2008 group by 1,2order by  holiday_weekend_commission desc limit 10\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"select u.firstname, u.lastname, sum(s.commission) as holiday_weekend_commission\n from dates d\n inner join sales s on s.dateid  = d.dateid \n inner join users u on s.sellerid = u.userid\n where (d.holiday = true or d.day in ('SU','SA')) and d.YEAR = 2008 group by 1,2order by  holiday_weekend_commission desc limit 10\n"}]}]},{"type":"element","tag":"h3","props":{"id":"shares-of-amount-paid-by-music-category-among-buyers-who-like-musicals"},"children":[{"type":"text","value":"Shares of Amount Paid by Music Category among Buyers who like musicals"}]},{"type":"element","tag":"pre","props":{"className":["language-sql"],"code":"select c.catname, sum(s.pricepaid) pricepaid, sum(s.qtysold) as qtysold\n from categories  c\n inner join events e on e.catid = c.catid\n inner join sales s on s.eventid = e.eventid\n inner join users u on u.userid = s.buyerid\nwhere  u.likemusicals = true\ngroup by 1\n","language":"sql","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"select c.catname, sum(s.pricepaid) pricepaid, sum(s.qtysold) as qtysold\n from categories  c\n inner join events e on e.catid = c.catid\n inner join sales s on s.eventid = e.eventid\n inner join users u on u.userid = s.buyerid\nwhere  u.likemusicals = true\ngroup by 1\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"blog-tables-setup","depth":2,"text":"Blog Tables Setup","children":[{"id":"create-the-id_sequence-table","depth":3,"text":"Create the id_sequence table"},{"id":"create-the-blogs-table","depth":3,"text":"Create the blogs table"},{"id":"least-popular-events","depth":3,"text":"Least Popular Events"},{"id":"inventory-aging","depth":3,"text":"Inventory Aging"},{"id":"event_location_and_time","depth":3,"text":"event_location_and_time"},{"id":"people_sold_tickets_to_events","depth":3,"text":"people_sold_tickets_to_events"},{"id":"big_spenders","depth":3,"text":"big_spenders"},{"id":"sellers-who-made-more-than-1-sale-in-a-holiday","depth":3,"text":"sellers who made more than 1 sale in a holiday"},{"id":"top-10-sellers-made-most-on-holidays-or-weekends-in-2008","depth":3,"text":"top 10 sellers made most on holidays or weekends in 2008"},{"id":"shares-of-amount-paid-by-music-category-among-buyers-who-like-musicals","depth":3,"text":"Shares of Amount Paid by Music Category among Buyers who like musicals"}]}]}},"_type":"markdown","_id":"content:docs:getting-started-with-duckdb-sql-ide.md","_source":"content","_file":"docs/getting-started-with-duckdb-sql-ide.md","_extension":"md"},{"_path":"/","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Just a paragraph.","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"just-a-paragraph"},"children":[{"type":"text","value":"Just a paragraph."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:index.md","_source":"content","_file":"index.md","_extension":"md"}],"navigation":[{"title":"Aboutme","_path":"/aboutme","children":[{"title":"Senthilnathan Karuppaiah","_path":"/aboutme/senthilnathan-karuppaiah"}]},{"title":"Blogs","_path":"/blogs","children":[{"title":"Got back into blog writing.","_path":"/blogs/2021-06-20-backinwriting"},{"title":"Deploy Zypress (or Static Website) in a standalone Golang binary","_path":"/blogs/2021-07-18-run-static-website-in-stand-alone-golang-binary"},{"title":"Open sourced new Go API Server which can be deployed 100% free in Netlify","_path":"/blogs/2021-10-08-zypress-server-in-golang"},{"title":"How to create local DNS in Mac OS for Kubernetes Ingress testing?","_path":"/blogs/2021-10-31-local-dns-in-mac-for-local-kubernetes-ingress"},{"title":"How to expose apps running in your home lab server securely to public internet thru cloudflare tunnel?","_path":"/blogs/2021-11-07-expose-apps-running-in-your-home-lab-server-securely-to-public-internet-thru-cloudflare-tunnel"},{"title":"All about Zypress, a blog engine in a single binary","_path":"/blogs/all-about-zypress-a-blog-engine-in-a-single-binary"},{"title":"Building a No-Code MicroORM with RESTful API for DuckDB","_path":"/blogs/building-a-no-code-microorm-with-restful-api-for-duckdb"},{"title":"Building and Running AMD64 Docker Containers on Apple M1","_path":"/blogs/building-and-running-amd64-docker-containers-on-apple-m1"},{"title":"Building and Running AMD64 Docker Containers on Apple M1","_path":"/blogs/converting-pdf-to-png-images-with-ocr-using-docker-and-tesseract"},{"title":"Free Lightweight Online DuckDB SQL Query Editor in NuxtJS and Tailwind CSS","_path":"/blogs/free-lightweight-online-duckdb-sql-query-editor-in-nuxtjs-and-tailwind-css"},{"title":"Host Zypress in Life-time free linux box from Oracle Cloud Infrastructure (OCI)","_path":"/blogs/lifetime-free-linux-box-from-oracle"},{"title":"Lodash","_path":"/blogs/lodash"},{"title":"Running a Binary in Headless Mode","_path":"/blogs/running-a-binary-in-headless-mode"},{"title":"Seamlessly Deploying ERPNext's Healthcare Module named Frappe Health on Docker","_path":"/blogs/seamlessly-deploying-erpnexts-healthcare-module-on-docker"},{"title":"Smoothing ERPNext Deployment on Apple's M1 via Docker-Compose","_path":"/blogs/smoothing-erpnext-deployment-on-apples-m1-via-docker-compose"},{"title":"Templrjs Demo","_path":"/blogs/using-makefiles-to-bundle-a-full-stack-app-into-a-go-binary"},{"title":"Zypress, Open-source Jamstack framework created using NuxtJS (Vue.js) + Tailwindcss","_path":"/blogs/zypress"}]},{"title":"Docs","_path":"/docs","children":[{"title":"SQL","_path":"/docs/duckdbsql"},{"title":"Getting Started with DuckDB SQL IDE","_path":"/docs/getting-started-with-duckdb-sql-ide"}]},{"title":"Just a paragraph.","_path":"/"}]}